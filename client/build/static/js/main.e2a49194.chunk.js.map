{"version":3,"sources":["components/Navbar/Toggle.js","components/Navbar/Navbar.jsx","components/Customers/Customer/Customer.jsx","components/Customers/Customers.jsx","components/Estimates/Estimate/Estimate.jsx","components/Estimates/Estimates.jsx","components/Invoices/Invoice/Invoice.jsx","components/Invoices/Invoices.jsx","components/Materials/Materials.jsx","components/Employees/Employee/Employee.jsx","components/Employees/Employees.jsx","components/Schedules/Schedules.jsx","components/Customers/Customer/CustomerEdit.jsx","components/Dashboard/Dashboard.jsx","components/Invoices/Invoice/InvoiceEdit.jsx","components/Employees/Employee/EmployeeEdit.jsx","components/Estimates/Estimate/EstimateEdit.jsx","components/Authentication/Login.jsx","App.js","index.js"],"names":["Toggle","useColorMode","toggleColorMode","colorMode","align","justify","height","direction","label","onClick","fontSize","colorScheme","variant","aria-label","icon","Moon","Navbar","position","w","h","bg","roundedTopRight","roundedBottomRight","flexDir","p","m","to","display","shadow","roundedRight","justifyContent","pl","boxSize","src","marginTop","_hover","rounded","color","orientation","paddingTop","paddingBottom","Customer","props","menu","customers","length","gap","map","customer","index","id","pt","pb","fontFamily","fontWeight","name","email","phone_number","ml","ChevronRight","Customers","history","useHistory","useState","getCustomers","searchCustomer","setSearchCustomer","url","useEffect","localStorage","getItem","push","getAllCustomers","a","axios","get","then","response","allCustomers","data","catch","error","console","getAllCustomersByName","event","preventDefault","results","useDisclosure","isOpen","onOpen","onClose","initialRef","React","useRef","inputValue","SetInputValue","setCustomerName","address","setAddress","city","setCity","state","setState","zipcode","setZipcode","setEmail","handleSubmit","json","post","log","err","initialFocusRef","textAlign","method","onSubmit","isRequired","value","onChange","target","ref","placeholder","children","type","e","formattedPhoneNumber","phoneNumber","replace","phoneNumberLength","slice","formatPhoneNumber","handlePhoneInput","mr","pr","border","leftIcon","Add","Estimate","estimates","estimate","letterSpacing","Date","estimate_date","toLocaleDateString","cu","quote_price","ets","status_name","Estimates","getEstimates","setCustomers","etDate","setEtDate","expDate","setExpDate","quotePrice","setQuotedPrice","estStatus","setEstStatus","serviceName","setServiceName","measurement","setMeasurement","setSelectedCustomer","cuIdCaptured","setCuIdCaptured","getAllEstimates","allEstimates","etStatusId","customerId","exp_date","sqft_measurement","service_name","price","loadOptions","inputText","callback","selectedCustomer","selectedCuId","getOptionLabel","option","theme","borderRadius","colors","primary25","primary","neutral0","neutral90","defaultValue","selectedValue","handleEstimateStatusInput","Invoice","invoices","invoice","inv_date","amount_due","invs","Invoices","getInvoices","invoiceDate","setInvoiceDate","dueDate","setDueDate","amountDue","setAmountDue","selectInvoiceStatus","setSelectInvoiceStatus","selectJobTypeOption","setJobTypeOption","getAllInvoices","allInvoices","jobTypeId","invStatusId","due_date","Intl","NumberFormat","style","currency","format","swal","handleJobTypeInput","handleInvoiceStatusInput","Materials","Employee","employees","emp_name","payrate","Employees","getEmployees","searchEmployee","setSearchEmployee","getAllEmployees","setPayrate","empStatus","allEmployees","emp_statusId","getAllEmployeesByName","Schedules","CustomerEdit","match","params","getCustomer","selectField","setSelectField","getAllCustomer","allCustomer","deleteCustomer","title","text","buttons","dangerMode","willDelete","delete","url2","put","options","ChevronLeft","Dashboard","clear","templateColumns","InvoiceEdit","setInvoice","setCustomer","cuStatus","setCuStatus","jobType","setJobType","getInvoiceById","invoiceById","jtype","deleteInvoice","markInvoicePaid","markInvoicePending","markInvoiceOutstanding","type_name","roundedTop","roundedBottom","EmployeeEdit","setEmployees","setPayRate","EstimateEdit","estDate","setEstDate","setQuotePrice","sqMeasurement","setSqMeasurement","deleteEstimate","markEstimateApproved","markEstimatePending","markEstimateExpired","convertToInvoice","Login","loginUsername","setLoginUsername","loginPassword","setLoginPassword","handleLogin","credentials","username","password","status","setItem","minH","spacing","mx","maxW","py","px","useColorModeValue","boxShadow","base","sm","App","useSystemColorMode","exact","path","component","DashBoard","exaxt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2a49194.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Flex, IconButton, Tooltip, useColorMode } from \"@chakra-ui/react\";\r\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\r\n\r\nexport default function Toggle() {\r\n    const {colorMode, toggleColorMode } = useColorMode();\r\n    return (\r\n        <div>\r\n            <Flex align='center' justify='center' height='4rem' direction='column'>\r\n                <Tooltip label='Toggle Dark Mode'>\r\n                    <IconButton onClick={() => toggleColorMode()} fontSize='35px' colorScheme='yellow' variant='ghost' aria-label='Toggle Dark Mode' icon={<MoonIcon />}/>\r\n                </Tooltip>\r\n            </Flex>\r\n            \r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Box, Text, Flex, UnorderedList, ListItem, Image, Avatar, AvatarBadge, AvatarGroup, Divider, Tooltip} from '@chakra-ui/react';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport Toggle from \"./Toggle\";\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <main>\r\n        <Flex position='fixed' w='9rem' h='100vh' bg='gray.700' roundedTopRight='25' roundedBottomRight='25' flexDir='column' p='0' m='0'>\r\n            <Link to='/'>\r\n                <Box display='flex' flexDir='column' h='9rem' bg='blue.400' shadow='xl' roundedRight='25' justifyContent='center' pl='20px'>\r\n                    <Image boxSize='100px' src='https://github.com/rrios4/roofing-webapp/blob/main/client/src/assets/LogoRR.png?raw=true'/>\r\n                </Box>\r\n            </Link>\r\n            <Box display='flex' justifyContent='center' marginTop='auto' p='1rem'>\r\n                <Link to='/'>\r\n                    <Box _hover={{bg: \"gray.600\"}} rounded='md' p='8px' color='white'>\r\n                        <Tooltip label='Home' bg=\"gray.500\">\r\n                            <HomeIcon fontSize='large' _hover={{bg: \"red\"}}/>\r\n                        </Tooltip>\r\n                    \r\n                    </Box>\r\n                </Link>\r\n\r\n            </Box>\r\n            <Box>\r\n                <Divider orientation=\"horizontal\"/>\r\n            </Box>\r\n            <Box display=\"flex\" color='white' justifyContent='center' paddingTop='1rem' paddingBottom='1rem'>\r\n                <Toggle />\r\n            </Box>\r\n            {/* <Box display=\"flex\" color='white' justifyContent='center' paddingTop='2rem' paddingBottom='2rem'>\r\n                <Tooltip label='SimplyNex' bg=\"gray.500\">\r\n                    <Avatar shadow='sm' size='lg' src='https://64.media.tumblr.com/073578da50f557bd56caef112e255950/b754da231bb4bd69-34/s640x960/4f8c9cf93d4f03c42d448eba0dac2a9cbb2a69e2.jpg'/>\r\n                </Tooltip>\r\n            </Box> */}\r\n            \r\n\r\n        </Flex>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\r\nimport {Box, Badge, Flex, Grid, Text} from \"@chakra-ui/react\";\r\nimport { ChevronRightIcon } from \"@chakra-ui/icons\";\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Customer(props) {\r\n    const {menu, customers} = props;\r\n    if(customers.length > 0) {\r\n        return(\r\n            <Grid gap={4}>\r\n                {customers.map((customer, index) => {\r\n                    return (\r\n                        <Link to={`/editcustomer/${customer.id}`}>\r\n                            <Flex p='4' justifyContent='space-between' rounded='xl' bg='gray.600' _hover={{bg: \"gray.500\"}} shadow='md' pt='1.5rem' pb='1.5rem'>\r\n                                <Box key={customer.id} pl='1rem'>\r\n                                    <Text fontFamily='sans-serif' fontWeight='light'>{customer.id}</Text>\r\n                                </Box>\r\n                                <Box pl='12'>\r\n                                    <Text fontFamily='sans-serif' fontWeight='ligh'>{customer.name}</Text>\r\n                                </Box>\r\n                                <Box pl='12'>\r\n                                    <Text fontFamily='sans-serif' fontWeight='light'>{customer.email}</Text>\r\n                                </Box>\r\n                                <Box pl='12'>\r\n                                    <Text fontFamily='sans-serif' fontWeight='light'>{customer.phone_number}</Text>\r\n                                </Box>\r\n                                <Box pl='10' ml='auto'>\r\n                                <Badge ml=\"1\" fontSize=\"0.8em\" colorScheme=\"green\" variant='solid'>\r\n                                    Active\r\n                                </Badge>\r\n                                </Box>\r\n                                <Box pl=\"5\">\r\n                                    <ChevronRightIcon fontSize='25px'/>\r\n                                </Box>\r\n                            </Flex>\r\n                        </Link>\r\n                    )\r\n                })}\r\n            </Grid>   \r\n        )\r\n    } else {\r\n        return (\r\n            <Flex p='4' justifyContent='space-between' justifyContent='center'>\r\n                <Box display='flex'>\r\n                    <Text shadow='sm' color='red' fontSize='20px'>No Customers yet!</Text>\r\n                </Box>\r\n            </Flex>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Customer;\r\n\r\n","import React, {useState, useEffect} from 'react';\r\n//import {Grid} from '@material-ui/core';\r\nimport Customer from './Customer/Customer';\r\nimport {VStack, Grid, Stack, Flex, Box, Text, Button, IconButton, Input, InputGroup, InputLeftAddon, FormHelperText, NumberInput, NumberInputField, Form, useDisclosure, Modal, ModalOverlay, ModalContent, ModalCloseButton, ModalBody, ModalHeader, FormControl, FormLabel, ModalFooter} from '@chakra-ui/react';\r\nimport { SearchIcon, AddIcon } from \"@chakra-ui/icons\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nfunction formatPhoneNumber(value) {\r\n    //if value is falsy eg if the user deletes the input, then just return \r\n    if(!value) return value;\r\n\r\n    //clean the input for any non-digit values.\r\n    const phoneNumber = value.replace(/[^\\d]/g, \"\");\r\n\r\n    // phoneNumberLength is used to know when to apply our formatting for the phone number\r\n    const phoneNumberLength = phoneNumber.length;\r\n\r\n    // we need to return the value with no formatting if its less then four digits\r\n    // this is to avoid weird behavior that occurs if you  format the area code to early\r\n    if (phoneNumberLength < 4) return phoneNumber;\r\n\r\n    // if phoneNumberLength is greater than 4 and less the 7 we start to return\r\n    // the formatted number\r\n    if (phoneNumberLength < 7) {\r\n        return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\r\n    }\r\n\r\n    // finally, if the phoneNumberLength is greater then seven, we add the last\r\n    // bit of formatting and return it.\r\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(\r\n        3,\r\n        6\r\n    )}-${phoneNumber.slice(6, 10)}`;\r\n}\r\n\r\nexport default function Customers() {\r\n        let history = useHistory();\r\n\r\n        //GET data from API\r\n        const [customers, getCustomers] = useState('');\r\n        const [searchCustomer, setSearchCustomer] = useState('');\r\n        const url = 'http://localhost:8081/api';\r\n        const query = `/?name=${searchCustomer}`\r\n\r\n        useEffect(() => {\r\n            // if a user is logged in, their username will be in Local Storage as 'currentUser' until they log out.\r\n            if (!localStorage.getItem('username')) {\r\n                history.push('/login');\r\n            }\r\n            getAllCustomers();\r\n        }, []);\r\n\r\n        const getAllCustomers = async() => {\r\n            await axios.get(`${url}/customers`)\r\n            .then((response) => {\r\n                const allCustomers = response.data\r\n                //add our data to state\r\n                getCustomers(allCustomers);\r\n            })\r\n            .catch(error => console.error(`Error: ${error}`));\r\n        }\r\n\r\n        const getAllCustomersByName = async(event) => {\r\n            event.preventDefault();\r\n            axios.get(`${url}/customers/?name=${searchCustomer}`)\r\n            .then((response) => {\r\n                const results = response.data;\r\n                //add data to old state to update it\r\n                getCustomers(results);\r\n                this.customers(results);\r\n            })\r\n            .catch(error => console.error(`Error: ${error}`));\r\n        }\r\n\r\n        const { isOpen, onOpen, onClose } = useDisclosure();\r\n        const initialRef = React.useRef();\r\n        //const finalRef = React.useRef();\r\n\r\n        const [inputValue, SetInputValue] = useState(\"\");\r\n\r\n        const handlePhoneInput = (e) => {\r\n            //This is where we'll call our future formatPhoneNumber function\r\n            const formattedPhoneNumber = formatPhoneNumber(e.target.value);\r\n            //We'll set the input value using our setInputValue\r\n            SetInputValue(formattedPhoneNumber);\r\n        }\r\n\r\n        // States that pick up the values from the input fields of the form\r\n        const [name, setCustomerName] = useState('');\r\n        const [address, setAddress] = useState('');\r\n        const [city, setCity] = useState('');\r\n        const [state, setState] = useState('');\r\n        const [zipcode, setZipcode] = useState('');\r\n        const [email, setEmail] = useState('');\r\n        \r\n        // Function that will make the POST request from axios\r\n        const handleSubmit = async(event) => {\r\n            event.preventDefault();\r\n            const url2 = 'http://localhost:8081/api/customers/add'\r\n            const json = {\r\n                name: name,\r\n                address: address,\r\n                city: city,\r\n                state: state,\r\n                zipcode: zipcode,\r\n                phone_number: inputValue,\r\n                email: email\r\n            }\r\n            await axios.post(url2, json)\r\n            .then((response) => {\r\n                console.log('I was submitted', response);\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n            console.log('Submit Function works!')\r\n            //history.go(0);\r\n            getAllCustomers();\r\n            setCustomerName('');\r\n            setAddress('');\r\n            setCity('');\r\n            setZipcode('');\r\n            SetInputValue('');\r\n            setEmail('');\r\n        };\r\n\r\n    return (\r\n        <main>\r\n        {/* <Grid container justify=\"center\" spacing={4}>\r\n            {customers.map((customer) => (\r\n                <Grid item key={customer.id} xs={12} sm={6} md={4} lg={3}>\r\n                        <Customer customer={customer} />\r\n                </Grid>\r\n            ))}\r\n        </Grid> */}\r\n            <Flex flexDir='column' justifyContent='center' pb='2rem'>\r\n                <Modal initialFocusRef={initialRef} isOpen={isOpen} onClose={onClose}>\r\n                    <ModalOverlay />\r\n                    <ModalContent p='1rem' ml='6rem'>\r\n                        <ModalHeader textAlign='center'>Create New Customer</ModalHeader>\r\n                        <Text color='red' textAlign='center'>Fill all fields please!</Text>\r\n                        <ModalCloseButton />\r\n                        <form method='POST' onSubmit={handleSubmit}>\r\n                        <ModalBody>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Customer Name</FormLabel>\r\n                                    <Input value={name} onChange={({target}) => setCustomerName(target.value)} id='name' ref={initialRef} placeholder='Customer name'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Address</FormLabel>\r\n                                    <Input value={address} onChange={({target}) => setAddress(target.value)} id='address' placeholder='Street address'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>City</FormLabel>\r\n                                    <Input value={city} onChange={({target}) => setCity(target.value)} id='city' placeholder='City'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>State</FormLabel>\r\n                                    <Input value={state} onChange={({target}) => setState(target.value)} id='state' placeholder='State'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Zipcode</FormLabel>\r\n                                    <Input value={zipcode} onChange={({target}) => setZipcode(target.value)} id='zipcode' placeholder='Zipcode'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                <FormLabel pt='1rem'>Phone Number</FormLabel>\r\n                                    <InputGroup>\r\n                                    <InputLeftAddon children=\"+1\" />\r\n                                    <Input id='phone' type='tel' placeholder='Phone number' onChange={(e) => handlePhoneInput(e)} value={inputValue}/>\r\n                                    </InputGroup>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Email</FormLabel>\r\n                                    <Input value={email} onChange={({target}) => setEmail(target.value)} placeholder='Email Address' type='email'/>\r\n                                </FormControl>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button colorScheme='blue' mr={3} type='submit' onClick={onClose} >Save</Button>\r\n                            <Button onClick={onClose} colorScheme='blue'>Cancel</Button>\r\n                        </ModalFooter>\r\n                        </form>\r\n\r\n                    </ModalContent> \r\n                </Modal>\r\n                <Box pt='2rem' pb='1rem' ml='auto' pr='1rem'>\r\n                    <Box display='flex'>\r\n                        <Box display='flex' flexDir='column' pr='1rem'>\r\n                            <form method='GET' onSubmit={getAllCustomersByName}>\r\n                                <FormControl>\r\n                                    <Input value={searchCustomer} onChange={({target}) => setSearchCustomer(target.value)} placeholder='Search for Customer' colorScheme='blue' border='2px'/>\r\n                                    <FormHelperText textAlign='right'>Press Enter key to search</FormHelperText>\r\n                                </FormControl>\r\n                            </form>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <Box display='flex' pt='1rem' pb='2rem' pl='1rem' pr='1rem' >\r\n                    <Box>\r\n                        <Text fontSize='4xl'> Customers</Text>\r\n                        <Text>There is a total of {customers.length} customers</Text>    \r\n                    </Box>\r\n                    <Box display='flex' flexDir='column' justifyContent='center' ml='auto' pr='6rem'>\r\n                        \r\n                    </Box>\r\n                    <Box display='flex' flexDir='column' justifyContent='center'>\r\n                        <Button leftIcon={<AddIcon/>} colorScheme='blue' variant='solid' onClick={onOpen}>\r\n                            New Customer \r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box p='1rem' color='white' >\r\n                        <Customer customers={customers} />                \r\n                </Box>\r\n            </Flex>\r\n            {/* <Flex justify='center' flexDirection='column' p={2}>\r\n                {customers.map((customer) => (\r\n                        <Box p={2}  item key={customer.id} xs={12} sm={6} md={4} lg={3}>\r\n                                <Customer customer={customer} />\r\n                        </Box>\r\n                    ))}\r\n            </Flex> */}\r\n             \r\n    </main>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\nimport { Grid, Box, Flex, Text, Badge } from '@chakra-ui/react';\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@chakra-ui/icons\";\nimport { Link } from \"react-router-dom\";\n\nfunction Estimate(props) {\n    const {menu, estimates} = props;\nif(estimates.length > 0){\n        return(\n            <Grid gap={4}>\n            {estimates.map((estimate, index) => {\n                    const statusBadge = () => {\n                        if(estimate.ets.status_name === 'Pending'){\n                            return(\n                                <Badge colorScheme='yellow' variant='solid' p='8px' w='110px' textAlign='center' rounded='xl'>{estimate.ets.status_name}</Badge>\n                            )\n                        } else if(estimate.ets.status_name === 'Approved'){\n                            return(\n                                <Badge colorScheme='green' variant='solid' p='8px' w='110px' textAlign='center' rounded='xl'>{estimate.ets.status_name}</Badge>\n                            )\n                        } else if(estimate.ets.status_name === 'Expired'){\n                            return(\n                                <Badge colorScheme='red' variant='solid' p='8px' w='110px' textAlign='center' rounded='xl'>{estimate.ets.status_name}</Badge>\n                            )\n                        }\n                    }\n                return (\n                    <Link to={`/editestimate/${estimate.id}`}>\n                        <Flex p='4' justifyContent='space-between' rounded='xl' bg='gray.600' _hover={{bg: \"gray.500\"}} shadow='sm' pt='1.5rem' pb='1.5rem' key={estimate.id}>\n                            <Box display='flex' flexDir='column' justifyContent='center' pl='1rem'>\n                                <Text letterSpacing='1px' fontSize='18px' fontFamily='sans-serif' fontWeight='light'>#{estimate.id}</Text>\n                            </Box>\n                            <Box display='flex' flexDir='column' justifyContent='center' pl='4rem'  >\n                                {/* <Text letterSpacing='1px' fontSize='18px' fontFamily='sans-serif' fontWeight='bold' mr='8px'>Invoice Date:</Text> */}\n                                <Text letterSpacing='1px' fontSize='16px' fontFamily='sans-serif' fontWeight='light'>{new Date(estimate.estimate_date).toLocaleDateString()}</Text>\n                            </Box>\n                            <Box display='flex' flexDir='column' justifyContent='center' pl='4rem' ml='auto' >\n                                {/* <Text letterSpacing='1px' fontSize='18px' fontFamily='sans-serif' fontWeight='bold' mr='8px'>Invoice Due:</Text> */}\n                                {/* <Text letterSpacing='1px' fontSize='16px' fontFamily='sans-serif' fontWeight='light'>{new Date(invoice.due_date).toLocaleDateString()}</Text> */}\n                                <Text letterSpacing='1px' fontSize='16px' fontFamily='sans-serif' fontWeight='light'>{estimate.cu.email}</Text>\n                            </Box>\n                            <Box display='flex' flexDir='column' justifyContent='center'  pl='4rem'>\n                                {/* <Text letterSpacing='1px' fontSize='18px' fontFamily='sans-serif' fontWeight='bold' mr='8px'>Customer:</Text> */}\n                                <Text letterSpacing='1px' fontSize='16px' fontFamily='sans-serif' fontWeight='light'>{estimate.cu.name}</Text>\n                            </Box>\n                            <Box display='flex' flexDir='column' justifyContent='center' pl='4rem'>\n                                {/* <Text letterSpacing='1px' fontSize='18px' fontFamily='sans-serif' fontWeight='bold' mr='8px'>Phone Number:</Text> */}\n                                <Text letterSpacing='1px' fontSize='16px' fontFamily='sans-serif' fontWeight='light'>{estimate.cu.phone_number}</Text>\n                            </Box>\n                            <Box display='flex' flexDir='column' justifyContent='center' pl='4rem'>\n                                {/* <Text letterSpacing='1px' fontSize='18px' mr='8px' fontWeight='bold'>Total:</Text> */}\n                                <Text letterSpacing='1px' fontSize='18px' fontWeight='light'>{estimate.quote_price}</Text>\n                            </Box>\n                            <Box display='flex' flexDir='column' justifyContent='center' pl='2rem' >\n                                {statusBadge()}\n                                {/* <Badge ml=\"1\" fontSize=\"0.8em\" colorScheme='yellow' variant='solid' p='4px'>  \n                                    <Text>{invoice.invs.status_name}</Text>\n                                </Badge> */}\n                            </Box>\n                            <Box display='flex' flexDir='column' justifyContent='center' pl=\"5\">\n                                <ChevronRightIcon fontSize='25px'/>\n                            </Box>\n                        </Flex>\n                    </Link>\n                )\n            })}\n        </Grid> \n        )\n    } else {\n        return (\n            <main>\n\n            </main>\n        )\n    }\n}\n\nexport default Estimate\n","import React, {useState, useEffect} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport {Select, Box, Flex, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, FormControl, FormLabel, Input, InputGroup, InputLeftAddon, Button, FormHelperText, Text, useDisclosure} from '@chakra-ui/react';\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\nimport Estimate from './Estimate/Estimate';\r\nimport AsyncSelect from 'react-select/async';\r\n\r\nfunction Estimates() {\r\n    //Defining variables\r\n    const {isOpen, onOpen, onClose} = useDisclosure();\r\n    const initialRef = React.useRef();\r\n    let history = useHistory();\r\n    const url = 'http://localhost:8081/api';\r\n\r\n    // States to manage data\r\n    const [estimates, getEstimates] = useState('');\r\n    const [customers, setCustomers] = useState('');\r\n    const [searchCustomer, setSearchCustomer] = useState('');\r\n    const [name, setCustomerName] = useState('');\r\n    const [etDate, setEtDate] = useState('');\r\n    const [expDate, setExpDate] = useState('');\r\n    const [quotePrice, setQuotedPrice] = useState('');\r\n    const [estStatus, setEstStatus] = useState('');\r\n    const [serviceName, setServiceName] = useState('');\r\n    const [measurement, setMeasurement] = useState('');\r\n\r\n    const [selectedCustomer, setSelectedCustomer] = useState('');\r\n    const [cuIdCaptured, setCuIdCaptured] = useState('');\r\n\r\n    //React Render Hook\r\n    useEffect(() => {\r\n        // if a user is logged in, their username will be in Local Storage as 'currentUser' until they log out.\r\n        if (!localStorage.getItem('username')) {\r\n            history.push('/login');\r\n        }\r\n        getAllEstimates();\r\n        getCustomers();\r\n    }, []);\r\n\r\n    //Functions for API calls or handling events across UI\r\n    const getAllEstimates = async() => {\r\n        await axios.get(`${url}/estimates/`)\r\n        .then((response) => {\r\n            const allEstimates = response.data\r\n            //add our data to state\r\n            getEstimates(allEstimates);\r\n            console.log(allEstimates)\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`));\r\n\r\n    }\r\n\r\n    const getCustomers = async() => {\r\n        await axios.get('http://localhost:8081/api/customers')\r\n        .then((response) => {\r\n            const allCustomers = response.data;\r\n            //add data to state\r\n            setCustomers(allCustomers);\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`))\r\n    }\r\n\r\n    const handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        const url2 = 'http://localhost:8081/api/estimates/add'\r\n        const json = {\r\n            etStatusId: estStatus,\r\n            customerId: cuIdCaptured,\r\n            estimate_date: etDate,\r\n            exp_date: expDate,\r\n            sqft_measurement: measurement,\r\n            service_name: serviceName,\r\n            price: `$${quotePrice}`,\r\n            quote_price: `$${quotePrice}`\r\n        }\r\n        await axios.post(url2, json)\r\n        .then((response) => {\r\n            console.log('I was submitted', response);\r\n        })\r\n        .catch((err) => {\r\n            console.error(err);\r\n        })\r\n        console.log('Submit Function works!')\r\n        //history.go(0);\r\n        getAllEstimates();\r\n        setEtDate('');\r\n        setExpDate('');\r\n        setQuotedPrice('');\r\n        setEstStatus('');\r\n        setServiceName('');\r\n        setMeasurement('');\r\n    };\r\n\r\n    const handleSelectedCustomer = (selectedCustomer) => {\r\n        // const value = e.target.value;\r\n        // setSelectedCustomer(value)\r\n        setSelectedCustomer({ \r\n            selectedCustomer: selectedCustomer || []\r\n        })\r\n        // console.log(selectedCustomer.value)\r\n        const selectedCuId = selectedCustomer.value\r\n        // console.log(selectedCustomer.e.value)\r\n        setCuIdCaptured(selectedCuId);\r\n        console.log(selectedCuId);\r\n        // console.log(cuIdCaptured)\r\n    };\r\n\r\n    const handleEstimateStatusInput = (e) => {\r\n        const selectedValue = e.target.value;\r\n        setEstStatus(selectedValue);\r\n    }\r\n\r\n    const loadOptions = async (inputText, callback) => {\r\n        await axios.get(`http://localhost:8081/api/customers/?name=${inputText}`)\r\n        .then((response) => {\r\n            // const allCustomers = response.data;\r\n            //add data to state\r\n            // setCustomers(allCustomers);\r\n            callback(response.data.map(customer =>({label: customer.name, value: customer.id, email: customer.email})))\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`))\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <Flex flexDir='column' justifyContent='center' pb='2rem'>\r\n                <Modal initialFocusRef={initialRef} isOpen={isOpen} onClose={onClose}>\r\n                    <ModalOverlay />\r\n                    <ModalContent p='1rem' ml='6rem'>\r\n                        <ModalHeader textAlign='center'>Create New Estimate</ModalHeader>\r\n                        <Text color='red' textAlign='center'>Fill all fields please!</Text>\r\n                        <ModalCloseButton />\r\n                        <form method='POST' onSubmit={handleSubmit}>\r\n                        <ModalBody>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Customer Name</FormLabel>\r\n                                    <AsyncSelect \r\n                                            onChange={handleSelectedCustomer} \r\n                                            loadOptions={loadOptions} \r\n                                            placeholder='Type Customer Name'\r\n                                            getOptionLabel={option => `${option.label},  ${option.email}`}\r\n                                            theme={theme => ({\r\n                                                ...theme,\r\n                                                borderRadius: 0,\r\n                                                colors: {\r\n                                                    ...theme.colors,\r\n                                                    primary25: 'primary',\r\n                                                    primary: 'black',\r\n                                                    neutral0: 'white',\r\n                                                    neutral90: 'white',\r\n                                                },\r\n                                            })}/>\r\n                                </FormControl>\r\n                                {/* <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Job Type</FormLabel>\r\n                                    <Select placeholder='Select Job Type'>\r\n                                        <option value='Option 1'>New Roof Installation</option>\r\n                                        <option value='Option 2'>Roof Repair</option>\r\n                                        <option value='Option 3'>Construction</option>\r\n                                    </Select>\r\n                                    <Input value={address} onChange={({target}) => setAddress(target.value)} id='address' placeholder='Street address'/>\r\n                                </FormControl> */}\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Estimate Status</FormLabel>\r\n                                    <Select placeholder='Select Invoice Status' defaultValue={null} value={estStatus} onChange={(e) => handleEstimateStatusInput(e)}>\r\n                                        <option value='2'>Approved</option>\r\n                                        <option value='1'>Pending</option>\r\n                                        <option value='3'>Expired</option>\r\n                                    </Select>\r\n                                    {/* <Input value={city} onChange={({target}) => setCity(target.value)} id='city' placeholder='City'/> */}\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Estimate Date</FormLabel>\r\n                                    <Input type='date' value={etDate} onChange={({target}) => setEtDate(target.value)} id='state' placeholder='Invoice date'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Expiration Date</FormLabel>\r\n                                    <Input type='date' value={expDate} onChange={({target}) => setExpDate(target.value)} id='zipcode' placeholder='Due date'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                <FormLabel pt='1rem'>Service Name</FormLabel>\r\n                                    <InputGroup>\r\n                                    <Input id='service' placeholder='Service Name' value={serviceName} onChange={({target}) => setServiceName(target.value)} />\r\n                                    </InputGroup>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Estimate Total</FormLabel>\r\n                                    <Input value={quotePrice} onChange={({target}) => setQuotedPrice(target.value)} placeholder='Quote price' type='number'/>\r\n                                </FormControl>\r\n                                <FormControl>\r\n                                    <FormLabel pt='1rem'>Sqft Roof Measurement</FormLabel>\r\n                                    <Input type='number' placeholder='Sqft of Roof' value={measurement} onChange={({target}) => setMeasurement(target.value)}></Input>\r\n                                </FormControl>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button colorScheme='blue' mr={3} type='submit' onClick={onClose} >Save</Button>\r\n                            <Button onClick={onClose} colorScheme='blue'>Cancel</Button>\r\n                        </ModalFooter>\r\n                        </form>\r\n\r\n                    </ModalContent> \r\n                </Modal>\r\n                <Box pt='2rem' pb='1rem' ml='auto' pr='1rem'>\r\n                    <Box display='flex'>\r\n                        {/* <Box display='flex' flexDir='column' pr='1rem'>\r\n                            <form method='GET' >\r\n                                <FormControl>\r\n                                    <Input value={searchCustomer} onChange={({target}) => setSearchCustomer(target.value)} placeholder='Search Customer Name' colorScheme='blue' border='2px'/>\r\n                                    <FormHelperText textAlign='right'>Press Enter key to search</FormHelperText>\r\n                                </FormControl>\r\n                            </form>\r\n                        </Box> */}\r\n                    </Box>\r\n                </Box>\r\n                <Box display='flex' pt='1rem' pb='2rem' pl='1rem' pr='1rem' >\r\n                    <Box>\r\n                        <Text letterSpacing='1px' fontWeight='normal' fontSize='4xl'>Estimates</Text>\r\n                        <Text>There is a total of {estimates.length} estimates</Text>    \r\n                    </Box>\r\n                    <Box display='flex' flexDir='column' justifyContent='center' ml='auto' pr='6rem'>\r\n                        \r\n                    </Box>\r\n                    <Box display='flex' flexDir='column' justifyContent='center'>\r\n                        <Button leftIcon={<AddIcon/>} colorScheme='blue' variant='solid' onClick={onOpen}>\r\n                            New Estimate\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box p='1rem' color='white' >\r\n                    <Estimate estimates={estimates} />                \r\n                </Box>\r\n            </Flex>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Estimates\r\n","import React from 'react'\r\nimport { Grid, Box, Flex, Text, Badge } from '@chakra-ui/react';\r\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@chakra-ui/icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Invoice(props) {\r\n    const {menu, invoices} = props;\r\n    if(invoices.length > 0){\r\n        return(\r\n            <Grid gap={4}>\r\n            {invoices.map((invoice, index) => {\r\n                    const statusBadge = () => {\r\n                        if(invoice.invs.status_name === 'Pending'){\r\n                            return(\r\n                                <Badge colorScheme='yellow' variant='solid' p='8px' w='110px' textAlign='center'  rounded='xl'>{invoice.invs.status_name}</Badge>\r\n                            )\r\n                        } else if(invoice.invs.status_name === 'Paid'){\r\n                            return(\r\n                                <Badge colorScheme='green' variant='solid' p='8px' w='110px' textAlign='center'  rounded='xl'>{invoice.invs.status_name}</Badge>\r\n                            )\r\n                        } else if(invoice.invs.status_name === 'Outstanding'){\r\n                            return(\r\n                                <Badge colorScheme='red' variant='solid' p='8px' w='110px' textAlign='center' rounded='xl'>{invoice.invs.status_name}</Badge>\r\n                            )\r\n                        }\r\n                    }\r\n                return (\r\n                    <Link to={`/editinvoice/${invoice.id}`}>\r\n                        <Flex p='4' justifyContent='space-between' rounded='xl' bg='gray.600' _hover={{bg: \"gray.500\"}} shadow='sm' pt='1.5rem' pb='1.5rem' key={invoice.id}>\r\n                            <Box display='flex' flexDir='column' justifyContent='center' pl='1rem'>\r\n                                <Text letterSpacing='1px' fontSize='18px' fontFamily='sans-serif' fontWeight='light'>#{invoice.id}</Text>\r\n                            </Box>\r\n                            <Box display='flex' flexDir='column' justifyContent='center' pl='2rem' >\r\n                                {/* <Text letterSpacing='1px' fontSize='18px' fontFamily='sans-serif' fontWeight='bold' mr='8px'>Invoice Date:</Text> */}\r\n                                <Text letterSpacing='1px' fontSize='16px' fontFamily='sans-serif' fontWeight='light'>{new Date(invoice.inv_date).toLocaleDateString()}</Text>\r\n                            </Box>\r\n                            <Box display='flex' flexDir='column' justifyContent='center' pl='2rem' pr='2rem' >\r\n                                {/* <Text letterSpacing='1px' fontSize='18px' fontFamily='sans-serif' fontWeight='bold' mr='8px'>Invoice Due:</Text> */}\r\n                                {/* <Text letterSpacing='1px' fontSize='16px' fontFamily='sans-serif' fontWeight='light'>{new Date(invoice.due_date).toLocaleDateString()}</Text> */}\r\n                                <Text letterSpacing='1px' fontSize='16px' fontFamily='sans-serif' fontWeight='light'>{invoice.cu.name}</Text>\r\n                            </Box>\r\n                            <Box display='flex' flexDir='column' justifyContent='center' pr='2rem' ml='auto'>\r\n                                {/* <Text letterSpacing='1px' fontSize='18px' fontFamily='sans-serif' fontWeight='bold' mr='8px'>Customer:</Text> */}\r\n                                <Text letterSpacing='1px' fontSize='16px' fontFamily='sans-serif' fontWeight='light'>{invoice.cu.email}</Text>\r\n                            </Box>\r\n                            <Box display='flex' flexDir='column' justifyContent='center' pr='2rem'>\r\n                                {/* <Text letterSpacing='1px' fontSize='18px' fontFamily='sans-serif' fontWeight='bold' mr='8px'>Phone Number:</Text> */}\r\n                                <Text letterSpacing='1px' fontSize='16px' fontFamily='sans-serif' fontWeight='light'>{invoice.cu.phone_number}</Text>\r\n                            </Box>\r\n                            <Box display='flex' flexDir='column' justifyContent='center' >\r\n                                {/* <Text letterSpacing='1px' fontSize='18px' mr='8px' fontWeight='bold'>Total:</Text> */}\r\n                                <Text letterSpacing='1px' fontSize='18px' fontWeight='light'>{invoice.amount_due}</Text>\r\n                            </Box>\r\n                            <Box display='flex' flexDir='column' justifyContent='center'   pl='2rem'>\r\n                                {statusBadge()}\r\n                                {/* <Badge ml=\"1\" fontSize=\"0.8em\" colorScheme='yellow' variant='solid' p='4px'>  \r\n                                    <Text>{invoice.invs.status_name}</Text>\r\n                                </Badge> */}\r\n                            </Box>\r\n                            <Box display='flex' flexDir='column' justifyContent='center' pl=\"5\">\r\n                                <ChevronRightIcon fontSize='25px'/>\r\n                            </Box>\r\n                        </Flex>\r\n                    </Link>\r\n                )\r\n            })}\r\n        </Grid> \r\n        )\r\n    } else {\r\n        return (\r\n            <main>\r\n\r\n            </main>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Invoice\r\n","import React, {useState, useEffect} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Formik, Select, Box, Flex, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, FormControl, FormLabel, Input, InputGroup, InputLeftAddon, Button, FormHelperText, Text, useDisclosure} from '@chakra-ui/react';\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\nimport axios from 'axios'\r\nimport Invoice from \"./Invoice/Invoice\";\r\nimport AsyncSelect from 'react-select/async';\r\nimport swal from 'sweetalert'\r\n\r\nfunction Invoices() {\r\n    //Defining variables\r\n    const {isOpen, onOpen, onClose} = useDisclosure();\r\n    const initialRef = React.useRef();\r\n    let history = useHistory();\r\n    const url = 'http://localhost:8081/api';\r\n\r\n    //React States to manage data\r\n    const [invoices, getInvoices] = useState('');\r\n    const [customers, setCustomers] = useState('');\r\n    const [selectedCustomer, setSelectedCustomer] = useState('');\r\n    const [cuIdCaptured, setCuIdCaptured] = useState('');\r\n    const [searchCustomer, setSearchCustomer] = useState('');\r\n    const [invoiceDate, setInvoiceDate] = useState('');\r\n    const [dueDate, setDueDate] = useState('');\r\n    const [amountDue, setAmountDue] = useState('');\r\n    const [selectInvoiceStatus, setSelectInvoiceStatus] = useState('');\r\n    const [serviceName, setServiceName] = useState('');\r\n    const [selectJobTypeOption, setJobTypeOption] = useState('');\r\n\r\n    // Functions to program events or actions\r\n    useEffect(() => {\r\n        // if a user is logged in, their username will be in Local Storage as 'currentUser' until they log out.\r\n        if (!localStorage.getItem('username')) {\r\n            history.push('/login');\r\n        }\r\n        getAllInvoices();\r\n        // getCustomers();\r\n    }, []);\r\n\r\n    const getAllInvoices = async() => {\r\n        await axios.get(`${url}/invoices/`)\r\n        .then((response) => {\r\n            const allInvoices = response.data\r\n            //add our data to state\r\n            getInvoices(allInvoices);\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`));\r\n    }\r\n\r\n    const handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        const url2 = 'http://localhost:8081/api/invoices/add'\r\n        const json = {\r\n            customerId: cuIdCaptured,\r\n            jobTypeId: selectJobTypeOption,\r\n            invStatusId: selectInvoiceStatus,\r\n            service_name: serviceName,\r\n            inv_date: invoiceDate,\r\n            due_date: dueDate,\r\n            amount_due: `${new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amountDue)}`\r\n        }\r\n        await axios.post(url2, json)\r\n        .then((response) => {\r\n            console.log('I was submitted', response);\r\n        })\r\n        .catch((err) => {\r\n            console.error(err);\r\n            swal(\"Good job!\", \"You clicked the button!\", \"error\");\r\n        })\r\n        console.log('Submit Function works!')\r\n        //history.go(0);\r\n        setJobTypeOption('');\r\n        setSelectInvoiceStatus('');\r\n        setServiceName('');\r\n        setInvoiceDate('');\r\n        setDueDate('');\r\n        setAmountDue('');\r\n        getAllInvoices();\r\n    };\r\n\r\n    const handleJobTypeInput = (e) => {\r\n        const selectedValue = e.target.value;\r\n        setJobTypeOption(selectedValue);\r\n    };\r\n    \r\n    const handleInvoiceStatusInput = (e) => {\r\n        const selectedValue = e.target.value;\r\n        setSelectInvoiceStatus(selectedValue);\r\n    };\r\n\r\n    const handleSelectedCustomer = (selectedCustomer) => {\r\n        // const value = e.target.value;\r\n        // setSelectedCustomer(value)\r\n        setSelectedCustomer({ \r\n            selectedCustomer: selectedCustomer || []\r\n        })\r\n        // console.log(selectedCustomer.value)\r\n        const selectedCuId = selectedCustomer.value\r\n        // console.log(selectedCustomer.e.value)\r\n        setCuIdCaptured(selectedCuId);\r\n        console.log(selectedCuId);\r\n        // console.log(cuIdCaptured)\r\n    };\r\n\r\n    const loadOptions = async (inputText, callback) => {\r\n        await axios.get(`http://localhost:8081/api/customers/?name=${inputText}`)\r\n        .then((response) => {\r\n            // const allCustomers = response.data;\r\n            //add data to state\r\n            // setCustomers(allCustomers);\r\n            callback(response.data.map(customer =>({label: customer.name, value: customer.id, email: customer.email})))\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`))\r\n    };\r\n\r\n    const formValidation = (value) => {\r\n        let error\r\n        if(!value){\r\n            error = 'Field is required'\r\n        } \r\n\r\n        return error;\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <Flex flexDir='column' justifyContent='center' pb='2rem'>\r\n                <Modal initialFocusRef={initialRef} isOpen={isOpen} onClose={onClose}>\r\n                    <ModalOverlay />\r\n                    <ModalContent p='1rem' ml='6rem'>\r\n                        <ModalHeader textAlign='center'>Create New Invoice</ModalHeader>\r\n                        <Text color='red' textAlign='center'>Fill all fields please!</Text>\r\n                        <ModalCloseButton />\r\n                        <form method='POST' onSubmit={handleSubmit}>\r\n                        <ModalBody>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Customer Name</FormLabel>\r\n                                        <AsyncSelect \r\n                                            \r\n                                            onChange={handleSelectedCustomer} \r\n                                            loadOptions={loadOptions} \r\n                                            placeholder='Type Customer Name'\r\n                                            getOptionLabel={option => `${option.label},  ${option.email}`}\r\n                                            theme={theme => ({\r\n                                                ...theme,\r\n                                                borderRadius: 0,\r\n                                                colors: {\r\n                                                    ...theme.colors,\r\n                                                    primary25: 'primary',\r\n                                                    primary: 'black',\r\n                                                    neutral0: 'white',\r\n                                                    neutral90: 'white',\r\n                                                },\r\n                                            })}/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Job Type</FormLabel>\r\n                                    <Select defaultValue={null} value={selectJobTypeOption} placeholder='Select Job Type' onChange={(e) => handleJobTypeInput(e)}>\r\n                                        <option value='1'>New Roof Installation</option>\r\n                                        <option value='2'>Roof Repairs</option>\r\n                                        <option value='3'>Structure Construction</option>\r\n                                        <option value='4'>Siding Repair</option>\r\n                                        <option value='5'>Roof Maintenance</option>\r\n                                        <option value='6'>Painting Interior of Home</option>\r\n                                        <option value='7'>Painting Exterior of Home</option>\r\n                                        <option value='8'>Flooring Installation</option>\r\n                                    </Select>\r\n                                    {/* <Input value={address} onChange={({target}) => setAddress(target.value)} id='address' placeholder='Street address'/> */}\r\n                                </FormControl>\r\n                                <FormControl isRequired={true}>\r\n                                    <FormLabel pt='1rem'>Invoice Status</FormLabel>\r\n                                    <Select defaultValue={null} value={selectInvoiceStatus} placeholder='Select Invoice Status' onChange={(e) => handleInvoiceStatusInput(e)}>\r\n                                        <option value='2'>Paid</option>\r\n                                        <option value='1'>Pending</option>\r\n                                        <option value='3'>Outstanding</option>\r\n                                    </Select>\r\n                                    {/* <Input value={city} onChange={({target}) => setCity(target.value)} id='city' placeholder='City'/> */}\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Invoice Date</FormLabel>\r\n                                    <Input type='date' value={invoiceDate} onChange={({target}) => setInvoiceDate(target.value)} id='invDate' placeholder='Invoice date'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Due Date</FormLabel>\r\n                                    <Input type='date' value={dueDate} onChange={({target}) => setDueDate(target.value)} id='dueDate' placeholder='Due date'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                <FormLabel pt='1rem'>Service Name</FormLabel>\r\n                                    <InputGroup>\r\n                                        <Input value={serviceName} id='service' onChange={({target}) => setServiceName(target.value)} placeholder='Service Name' />\r\n                                    </InputGroup>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Amount Due</FormLabel>\r\n                                    <Input value={amountDue} onChange={({target}) => setAmountDue(target.value)} placeholder='Amount due' type='number'/>\r\n                                </FormControl>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button colorScheme='blue' mr={3} type='submit' onClick={onClose} >Save</Button>\r\n                            <Button onClick={onClose} colorScheme='blue'>Cancel</Button>\r\n                        </ModalFooter>\r\n                        </form>\r\n\r\n                    </ModalContent> \r\n                </Modal>\r\n                <Box pt='2rem' pb='1rem' ml='auto' pr='1rem'>\r\n                    <Box display='flex'>\r\n                        <Box display='flex' flexDir='column' pr='1rem'>\r\n                            {/* <form method='GET' >\r\n                                <FormControl>\r\n                                    <Input value={searchCustomer} onChange={({target}) => setSearchCustomer(target.value)} placeholder='Search Invoices Name' colorScheme='blue' border='2px'/>\r\n                                    <FormHelperText textAlign='right'>Press Enter key to search</FormHelperText>\r\n                                </FormControl>\r\n                            </form> */}\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <Box display='flex' pt='1rem' pb='2rem' pl='1rem' pr='1rem' >\r\n                    <Box>\r\n                        <Text fontSize='4xl'>Invoices</Text>\r\n                        <Text>There is a total of {invoices.length} invoices</Text>    \r\n                    </Box>\r\n                    <Box display='flex' flexDir='column' justifyContent='center' ml='auto' pr='6rem'>\r\n                        \r\n                    </Box>\r\n                    <Box display='flex' flexDir='column' justifyContent='center'>\r\n                        <Button leftIcon={<AddIcon/>} colorScheme='blue' variant='solid' onClick={onOpen}>\r\n                            New Invoice\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box p='1rem' color='white' >\r\n                        <Invoice invoices={invoices} />                \r\n                </Box>\r\n            </Flex>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Invoices\r\n","import React, { useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Materials = () => {\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        // if a user is logged in, their username will be in Local Storage as 'currentUser' until they log out.\r\n        if (!localStorage.getItem('currentUser')) {\r\n            history.push('/login');\r\n        }\r\n    }, []);\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Materials\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport {Box, Badge, Container, Flex, Grid, Text} from \"@chakra-ui/react\";\r\nimport { ChevronRightIcon } from \"@chakra-ui/icons\";\r\n\r\nfunction Employee(props) {\r\n    const {menu, employees} = props;\r\n\r\n    if(employees.length > 0) {\r\n        return(\r\n                <Grid gap={4}>\r\n                {employees.map((employees, index) => {\r\n                return (\r\n                    <Link to={`/editemployee/${employees.id}`}>\r\n                        <Flex p='4' justifyContent='space-between' rounded='xl' bg='gray.600' _hover={{bg: \"gray.500\"}} shadow='md' pt='1.5rem' pb='1.5rem'>\r\n                            <Box pl='1rem' key={employees.id}>\r\n                                #{employees.id}\r\n                            </Box>\r\n                            <Box pl='12'>\r\n                                {employees.emp_name}\r\n                            </Box>\r\n                            <Box pl='12' ml='auto'>\r\n                                {employees.email}\r\n                            </Box>\r\n                            <Box pl='12'>\r\n                                {employees.phone_number}\r\n                            </Box>\r\n                            <Box pl='10'>\r\n                                <Badge bg='green.300' color='black'>\r\n                                    Active\r\n                                </Badge>\r\n                            </Box>\r\n                            <Box pl='12'>\r\n                                ${employees.payrate} per sq.\r\n                            </Box>\r\n                            <Box pl=\"5\">\r\n                                <ChevronRightIcon fontSize='25px'/>\r\n                            </Box>\r\n                        </Flex>\r\n                    </Link>\r\n                    \r\n\r\n                )\r\n            })}\r\n                </Grid>\r\n            \r\n\r\n        )\r\n    } else {\r\n        return (\r\n            <Flex p='4' justifyContent='space-between' justifyContent='center'>\r\n            <Box display='flex'>\r\n                <Text shadow='sm' color='red' fontSize='20px'>No Employees yet!</Text>\r\n            </Box>\r\n            </Flex>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Employee\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {VStack, Grid, Stack, Flex, Box, Text, Button, IconButton, Input, Form, Modal, ModalBody,ModalOverlay, ModalContent, ModalHeader, useDisclosure, ModalFooter, ModalCloseButton, FormControl, FormLabel, InputGroup, InputLeftAddon, Select, FormHelperText} from '@chakra-ui/react';\r\nimport { SearchIcon, AddIcon } from \"@chakra-ui/icons\";\r\nimport Employee from './Employee/Employee'\r\nimport axios from 'axios';\r\n\r\nfunction formatPhoneNumber(value) {\r\n\r\n    //if value is falsy eg if the user deletes the input, then just return \r\n    if(!value) return value;\r\n\r\n    //clean the input for any non-digit values.\r\n    const phoneNumber = value.replace(/[^\\d]/g, \"\");\r\n\r\n    // phoneNumberLength is used to know when to apply our formatting for the phone number\r\n    const phoneNumberLength = phoneNumber.length;\r\n\r\n    // we need to return the value with no formatting if its less then four digits\r\n    // this is to avoid weird behavior that occurs if you  format the area code to early\r\n    if (phoneNumberLength < 4) return phoneNumber;\r\n\r\n    // if phoneNumberLength is greater than 4 and less the 7 we start to return\r\n    // the formatted number\r\n    if (phoneNumberLength < 7) {\r\n        return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\r\n    }\r\n\r\n    // finally, if the phoneNumberLength is greater then seven, we add the last\r\n    // bit of formatting and return it.\r\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(\r\n        3,\r\n        6\r\n    )}-${phoneNumber.slice(6, 10)}`;\r\n}\r\n\r\nfunction Employees() {\r\n    const history = useHistory();\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const initialRef = React.useRef();\r\n\r\n    //GET data from API\r\n    const [employees, getEmployees] = useState('');\r\n    const [searchEmployee, setSearchEmployee] = useState('');\r\n    const url = 'http://localhost:8081/api';\r\n\r\n    useEffect(() => {\r\n        // if a user is logged in, their username will be in Local Storage as 'currentUser' until they log out.\r\n        if (!localStorage.getItem('username')) {\r\n            history.push('/login');\r\n        }\r\n        getAllEmployees();\r\n    }, []);\r\n\r\n    // States that pick up the values from the input fields of the form\r\n    const [name, setCustomerName] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [city, setCity] = useState('');\r\n    const [state, setState] = useState('');\r\n    const [zipcode, setZipcode] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [payrate, setPayrate] = useState('');\r\n    const [empStatus, setEmpStatus] = useState('');\r\n    const [inputValue, SetInputValue] = useState(\"\");\r\n\r\n    const getAllEmployees = () => {\r\n        axios.get(`${url}/employees`)\r\n        .then((response) => {\r\n            const allEmployees = response.data\r\n            //add our data to state\r\n            getEmployees(allEmployees);\r\n            console.log(allEmployees)\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`));\r\n    }\r\n\r\n    const handlePhoneInput = (e) => {\r\n        //This is where we'll call our future formatPhoneNumber function\r\n        const formattedPhoneNumber = formatPhoneNumber(e.target.value);\r\n        //We'll set the input value using our setInputValue\r\n        SetInputValue(formattedPhoneNumber);\r\n    }\r\n\r\n    // Function that will make the POST request from axios\r\n    const handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        const url2 = 'http://localhost:8081/api/employees/add'\r\n        const json = {\r\n            emp_statusId: '1',\r\n            emp_name: name,\r\n            address: address,\r\n            city: city,\r\n            state: state,\r\n            phone_number: inputValue,\r\n            email: email,\r\n            zipcode: zipcode,\r\n            payrate: payrate,\r\n            }\r\n            await axios.post(url2, json)\r\n            .then((response) => {\r\n                console.log('I was submitted', response);\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n            console.log('Submit Function works!')\r\n            console.log(empStatus)\r\n            //history.go(0);\r\n            getAllEmployees();\r\n            setCustomerName('');\r\n            setAddress('');\r\n            setCity('');\r\n            setZipcode('');\r\n            SetInputValue('');\r\n            setEmail('');\r\n        };\r\n\r\n        const getAllEmployeesByName = async(event) => {\r\n            event.preventDefault();\r\n            axios.get(`${url}/employees/?name=${searchEmployee}`)\r\n            .then((response) => {\r\n                const results = response.data;\r\n                //add data to old state to update it\r\n                getEmployees(results);\r\n                this.employees(results);\r\n            })\r\n            .catch(error => console.error(`Error: ${error}`));\r\n        }\r\n\r\n        // const statusOptions = [\r\n        //     {value: '1', label: 'Active'},\r\n        //     {value: '2', label: 'Fired'},\r\n        //     {value: '3', label: 'Injured'}\r\n        // ]\r\n\r\n    return (\r\n        <main>\r\n            <Modal initialFocusRef={initialRef} isOpen={isOpen} onClose={onClose}>\r\n                    <ModalOverlay />\r\n                    <ModalContent p='1rem' ml='6rem'>\r\n                        <ModalHeader textAlign='center'>Create New Employee</ModalHeader>\r\n                        <Text color='red' textAlign='center'>Fill all fields please!</Text>\r\n                        <ModalCloseButton />\r\n                        <form method='POST' onSubmit={handleSubmit}>\r\n                        <ModalBody>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Employee Name</FormLabel>\r\n                                    <Input value={name} onChange={({target}) => setCustomerName(target.value)} id='name' ref={initialRef} placeholder='Employee name'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Address</FormLabel>\r\n                                    <Input value={address} onChange={({target}) => setAddress(target.value)} id='address' placeholder='Street address'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>City</FormLabel>\r\n                                    <Input value={city} onChange={({target}) => setCity(target.value)} id='city' placeholder='City'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>State</FormLabel>\r\n                                    <Input value={state} onChange={({target}) => setState(target.value)} id='state' placeholder='State'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Zipcode</FormLabel>\r\n                                    <Input value={zipcode} onChange={({target}) => setZipcode(target.value)} id='zipcode' placeholder='Zipcode'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                <FormLabel pt='1rem'>Phone Number</FormLabel>\r\n                                    <InputGroup>\r\n                                    <InputLeftAddon children=\"+1\" />\r\n                                    <Input id='phone' type='tel' placeholder='Phone number' onChange={(e) => handlePhoneInput(e)} value={inputValue}/>\r\n                                    </InputGroup>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Email</FormLabel>\r\n                                    <Input value={email} onChange={({target}) => setEmail(target.value)} placeholder='Email Address' type='email'/>\r\n                                </FormControl>\r\n                                {/* <FormControl>\r\n                                    <FormLabel pt='1rem'>Employee Status</FormLabel>\r\n                                    <Select placeholder='Select employee status' option={statusOptions}>\r\n                                        <option value={1} onChange={({target}) => setEmpStatus(target.value)}>Active</option>\r\n                                        <option value={2} onChange={({target}) => setEmpStatus(target.value)}>Fired</option>\r\n                                        <option value={3} onChange={({target}) => setEmpStatus(target.value)}>Injured</option>\r\n                                    </Select>\r\n                                </FormControl> */}\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Payrate ($ per sq.)</FormLabel>\r\n                                    <Input type='number' value={payrate} onChange={({target}) => setPayrate(target.value)}/>\r\n                                </FormControl>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button colorScheme='blue' mr={3} type='submit' onClick={onClose} >Save</Button>\r\n                            <Button onClick={onClose} colorScheme='blue'>Cancel</Button>\r\n                        </ModalFooter>\r\n                        </form>\r\n\r\n                    </ModalContent> \r\n                </Modal>\r\n            <Flex flexDir='column' justifyContent='center' pb='2rem'>\r\n                <Box pt='2rem' pb='1rem' ml='auto' pr='1rem'>\r\n                    <Box display='flex'>\r\n                            <form method='GET' onSubmit={getAllEmployeesByName}>\r\n                                <FormControl>\r\n                                    <Input value={searchEmployee} onChange={({target}) => setSearchEmployee(target.value)} placeholder='Search for Employee' colorScheme='blue' border='2px'/>\r\n                                    <FormHelperText textAlign='right'>Press Enter key to search</FormHelperText>\r\n                                </FormControl>\r\n                            </form>\r\n                    </Box>\r\n                </Box>\r\n                <Box display='flex' pt='1rem' pb='3rem' pl='1rem' pr='1rem'>\r\n                    <Box>\r\n                        <Text fontSize='4xl'>Employees</Text>\r\n                        <Text>There is a total of {employees.length} employees</Text>    \r\n                    </Box>\r\n                    <Box display='flex' flexDir='column' justifyContent='center' ml='auto' pr='6rem'>\r\n                        {/* Filter By */}\r\n                    </Box>\r\n                    <Box display='flex' flexDir='column' justifyContent='center'>\r\n                        <Button leftIcon={<AddIcon/>} onClick={onOpen} colorScheme='blue' variant='solid'>\r\n                            New Employee \r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box p='1rem' color='white'>\r\n                        <Employee employees={employees} />                \r\n                </Box>\r\n            </Flex>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Employees\r\n","import React, { useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst Schedules = () => {\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        // if a user is logged in, their username will be in Local Storage as 'currentUser' until they log out.\r\n        if (!localStorage.getItem('currentUser')) {\r\n            history.push('/login');\r\n        }\r\n    }, []);\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Schedules\r\n","import React, {useEffect, useState} from 'react'\r\nimport { Grid, Box, Flex, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, FormControl, FormLabel, Input, Button, FormHelperText, Text, useDisclosure} from '@chakra-ui/react';\r\nimport {Link, Redirect, useHistory} from 'react-router-dom';\r\nimport { ChevronLeftIcon } from '@chakra-ui/icons'\r\nimport axios from 'axios';\r\nimport Select from \"react-select\";\r\nimport swal from 'sweetalert'\r\n\r\nfunction formatPhoneNumber(value) {\r\n    //if value is falsy eg if the user deletes the input, then just return \r\n    if(!value) return value;\r\n\r\n    //clean the input for any non-digit values.\r\n    const phoneNumber = value.replace(/[^\\d]/g, \"\");\r\n\r\n    // phoneNumberLength is used to know when to apply our formatting for the phone number\r\n    const phoneNumberLength = phoneNumber.length;\r\n\r\n    // we need to return the value with no formatting if its less then four digits\r\n    // this is to avoid weird behavior that occurs if you  format the area code to early\r\n    if (phoneNumberLength < 4) return phoneNumber;\r\n\r\n    // if phoneNumberLength is greater than 4 and less the 7 we start to return\r\n    // the formatted number\r\n    if (phoneNumberLength < 7) {\r\n        return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\r\n    }\r\n\r\n    // finally, if the phoneNumberLength is greater then seven, we add the last\r\n    // bit of formatting and return it.\r\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(\r\n        3,\r\n        6\r\n    )}-${phoneNumber.slice(6, 10)}`;\r\n}\r\n\r\nconst CustomerEdit = (props) => {\r\n    const {id} = props.match.params;\r\n    let history = useHistory();\r\n    const {isOpen, onOpen, onClose} = useDisclosure();\r\n    const initialRef = React.useRef();\r\n    //GET data from API\r\n    const [customer, getCustomer] = useState('');\r\n\r\n    // States that pick up the values from the input fields of the form\r\n    const [name, setCustomerName] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [city, setCity] = useState('');\r\n    const [state, setState] = useState('');\r\n    const [zipcode, setZipcode] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [selectField, setSelectField] = useState('')\r\n\r\n    const url = 'http://localhost:8081/api';\r\n\r\n    useEffect(() => {\r\n        // if a user is logged in, their username will be in Local Storage as 'currentUser' until they log out.\r\n        if (!localStorage.getItem('username')) {\r\n            history.push('/login');\r\n        }\r\n        getAllCustomer();\r\n    }, []);\r\n    \r\n    const getAllCustomer = async () => {\r\n        await axios.get(`${url}/customers/${id}`)\r\n        .then((response) => {\r\n            const allCustomer = response.data\r\n            //add our data to state\r\n            getCustomer(allCustomer);\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`));\r\n    }\r\n\r\n    const deleteCustomer = async () => {\r\n        // console.log('Button will perform a delete to the database.');\r\n        await swal({\r\n            title: 'Are you sure?',\r\n            text: 'Once deleted, you will not be able to recover customer info!',\r\n            icon: 'warning',\r\n            buttons: true,\r\n            dangerMode: true\r\n        })\r\n        .then((willDelete) => {\r\n            if(willDelete) {\r\n                axios.delete(`${url}/customers/${id}`)\r\n                .then(response => {\r\n                    history.push(\"/customers\")\r\n                })\r\n                swal(\"Poof! Your customer has been deleted!\", {\r\n                    icon: \"success\",\r\n                });\r\n            } else {\r\n                swal(\"Your customer data was not deleted!\");\r\n                history.push(`/editcustomer/${id}`)\r\n            }\r\n        })          \r\n    }\r\n\r\n    const handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        const url2 = `http://localhost:8081/api/customers/${id}`\r\n        const json = {\r\n            name: name,\r\n            address: address,\r\n            city: city,\r\n            state: state,\r\n            zipcode: zipcode,\r\n            phone_number: inputValue,\r\n            email: email\r\n        }\r\n        console.log('Submit Function works!');\r\n        \r\n        if(selectField === '1'){\r\n            await axios.put(url2, {\r\n                name: name\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '2'){\r\n            await axios.put(url2, {\r\n                address: address\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '3'){\r\n            await axios.put(url2, {\r\n                city: city\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '4'){\r\n            await axios.put(url2, {\r\n                state: state\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '5'){\r\n            await axios.put(url2, {\r\n                zipcode: zipcode\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '6'){\r\n            await axios.put(url2, {\r\n                phone_number: inputValue\r\n            })\r\n        } else if(selectField === '7'){\r\n            await axios.put(url2, {\r\n                email: email\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '8'){\r\n            await axios.put(url2, json)\r\n            .then((response) => {\r\n                console.log('All fields have been updated!', response);\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        }\r\n        getAllCustomer();\r\n        setCustomerName('');\r\n        setAddress('');\r\n        setCity('');\r\n        setZipcode('');\r\n        SetInputValue('');\r\n        setEmail('');\r\n        setSelectField('');\r\n        onClose()\r\n    };\r\n\r\n    const closeButton = () => {\r\n        getAllCustomer();\r\n        setCustomerName('');\r\n        setAddress('');\r\n        setCity('');\r\n        setZipcode('');\r\n        SetInputValue('');\r\n        setEmail('');\r\n        setSelectField('');\r\n        onClose()\r\n    }\r\n    const [inputValue, SetInputValue] = useState(\"\");\r\n\r\n    const handlePhoneInput = (e) => {\r\n        //This is where we'll call our future formatPhoneNumber function\r\n        const formattedPhoneNumber = formatPhoneNumber(e.target.value);\r\n        //We'll set the input value using our setInputValue\r\n        SetInputValue(formattedPhoneNumber);\r\n    }  \r\n\r\n    const fieldOptions = [\r\n        { value: '1', label: 'Customer Name'},\r\n        { value: '2', label: 'Address'},\r\n        { value: '3', label: 'City'},\r\n        { value: '4', label: 'State'},\r\n        { value: '5', label: 'Zipcode'},\r\n        { value: '6', label: 'Phone Number'},\r\n        { value: '7', label: 'Email'},\r\n        { value: '8', label: 'All Fields'}\r\n    ]\r\n\r\n    const handleInputField = (selectField) => {\r\n        setSelectField(selectField.value);\r\n        console.log(selectField);\r\n    }\r\n\r\n    const renderInputField = ()=> {\r\n        if(selectField === '1'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={name} onChange={({target}) => setCustomerName(target.value)} id='name' ref={initialRef} placeholder='Customer Name'/>\r\n                    <FormHelperText>Current Name: {customer.name}</FormHelperText>\r\n                </Box>   \r\n            )\r\n        } else if(selectField === '2'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={address} onChange={({target}) => setAddress(target.value)} id='address' placeholder='Street address'/>\r\n                    <FormHelperText>Current Address: {customer.address}</FormHelperText>\r\n                </Box>\r\n            )\r\n        } else if(selectField === '3'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={city} onChange={({target}) => setCity(target.value)} id='city' placeholder='City'/>\r\n                    <FormHelperText>Current City: {customer.city}</FormHelperText>\r\n                </Box>\r\n            )   \r\n        } else if(selectField === '4'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={state} onChange={({target}) => setState(target.value)} id='state' placeholder='State'/>\r\n                    <FormHelperText>Current State: {customer.state}</FormHelperText>\r\n                </Box>\r\n            )\r\n        } else if(selectField === '5'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={zipcode} onChange={({target}) => setZipcode(target.value)} id='zipcode' placeholder='Zipcode'/>\r\n                    <FormHelperText>Current Zipcode: {customer.zipcode}</FormHelperText>\r\n                </Box>\r\n            )\r\n        } else if(selectField === '6'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input id='phone' type='tel' placeholder='Phone number' onChange={(e) => handlePhoneInput(e)} value={inputValue}/>\r\n                    <FormHelperText>Current Phone Number: {customer.phone_number}</FormHelperText>\r\n                </Box>\r\n            )\r\n        } else if(selectField === '7'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={email} onChange={({target}) => setEmail(target.value)} placeholder='Email Address' type='email'/>\r\n                    <FormHelperText>Current Email: {customer.email}</FormHelperText>\r\n                </Box>\r\n            )\r\n        } else if(selectField === '8'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Box pb='1rem'>\r\n                        <FormLabel>Customer Name: </FormLabel>\r\n                        <Input value={name} onChange={({target}) => setCustomerName(target.value)} id='name' ref={initialRef} placeholder='Customer Name'/>\r\n                        <FormHelperText>Current Name: {customer.name}</FormHelperText>\r\n                    </Box>\r\n                    <Box pb='1rem'>\r\n                        <FormLabel>Address: </FormLabel>\r\n                        <Input value={address} onChange={({target}) => setAddress(target.value)} id='address' placeholder='Street address'/>\r\n                        <FormHelperText>Current Address: {customer.address}</FormHelperText>\r\n                    </Box >\r\n                    <Box  pb='1rem'>\r\n                        <FormLabel>City: </FormLabel>\r\n                        <Input value={city} onChange={({target}) => setCity(target.value)} id='city' placeholder='City'/>\r\n                        <FormHelperText>Current City: {customer.city}</FormHelperText>\r\n                    </Box>\r\n                    <Box  pb='1rem'>\r\n                        <FormLabel>State: </FormLabel>\r\n                        <Input value={state} onChange={({target}) => setState(target.value)} id='state' placeholder='State'/>\r\n                        <FormHelperText>Current State: {customer.state}</FormHelperText>\r\n                    </Box>\r\n                    <Box  pb='1rem'>\r\n                        <FormLabel>Zipcode: </FormLabel>\r\n                        <Input value={zipcode} onChange={({target}) => setZipcode(target.value)} id='zipcode' placeholder='Zipcode'/>\r\n                        <FormHelperText>Current Zipcode: {customer.zipcode}</FormHelperText>\r\n                    </Box>\r\n                    <Box pb='1rem'>\r\n                        <FormLabel>Phone Number: </FormLabel>\r\n                        <Input id='phone' type='tel' placeholder='Phone number' onChange={(e) => handlePhoneInput(e)} value={inputValue}/>\r\n                        <FormHelperText>Current Name: {customer.phone_number}</FormHelperText>\r\n                    </Box>\r\n                    <Box pt='1rem' >\r\n                        <FormLabel>Email: </FormLabel>\r\n                        <Input value={email} onChange={({target}) => setEmail(target.value)} placeholder='Email Address' type='email'/>\r\n                        <FormHelperText>Current Name: {customer.email}</FormHelperText>\r\n                    </Box>  \r\n                </Box>\r\n                \r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Flex direction='column' justifyContent='center' pb='2rem' pt='2rem' w={[300, 400, 800]} >\r\n             <Modal initialFocusRef={initialRef} isOpen={isOpen} onClose={onClose}>\r\n                    <ModalOverlay />\r\n                    <ModalContent p='1rem' ml='6rem'>\r\n                        <ModalHeader textAlign='center' letterSpacing='1px'>Edit Customer</ModalHeader>\r\n                        <Text color='red' textAlign='center'>Fill all fields please!</Text>\r\n                        <ModalCloseButton />\r\n                        <form method='PUT' onSubmit={handleSubmit}>\r\n                        <ModalBody>\r\n                            <FormControl>\r\n                                <FormLabel>Select Field:</FormLabel>\r\n                                    <Select\r\n                                    options={fieldOptions}\r\n                                    onChange={handleInputField}\r\n                                    theme={theme => ({\r\n                                        ...theme,\r\n                                        borderRadius: 0,\r\n                                        colors: {\r\n                                            ...theme.colors,\r\n                                            primary25: 'primary',\r\n                                            primary: 'black',\r\n                                            neutral0: 'white',\r\n                                            neutral90: 'white',\r\n                                        },\r\n                                    })}/>\r\n                                    {renderInputField()}\r\n                            </FormControl>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button colorScheme='blue' mr={3} type='submit' onClick={handleSubmit} >Update</Button>\r\n                            <Button onClick={closeButton} colorScheme='blue'>Cancel</Button>\r\n                        </ModalFooter>\r\n                        </form>\r\n\r\n                    </ModalContent> \r\n                </Modal>\r\n            <Link to='/customers'>\r\n                <Box display='flex' pt='1rem' pb='1rem' pl='1rem'>\r\n                    <Box display='flex' _hover={{color: 'blue.400'}}>\r\n                        <ChevronLeftIcon fontSize='35px'/>\r\n                        <Text _hover={{color: \"blue.400\"}} fontWeight='bold' fontSize='20px'>Go Back</Text> \r\n                    </Box>\r\n                </Box>\r\n            </Link>\r\n            <Box display='flex' pt='1rem' justifyContent='center'>\r\n                <Box display='flex' p='1rem' bg='gray.600' rounded='2xl' shadow='md' w={[300, 400, 800]}>\r\n                    <Box display='flex' mr='auto' pl='1rem'>\r\n                        <Box display='flex' flexDir='column' justifyContent='center' pr='1rem'>\r\n                            {/* <Text fontWeight='bold' fontSize='20px' color='white'>Status:</Text> */}\r\n                            <Text color='white' fontSize='25px' letterSpacing='1px' fontWeight='bold'>Customer #{customer.id}</Text>\r\n                        </Box>\r\n                        <Box >\r\n                            {/* <Badge bg='green.600' p='8px'>Active</Badge> */}\r\n                        </Box>\r\n                    </Box>\r\n                    <Box display='flex' pr='1rem'>\r\n                        <Box pr='1rem'>\r\n                            <Button onClick={onOpen} colorScheme='blue'>Edit</Button>\r\n                        </Box>\r\n                        <Box  color='white'>\r\n                                <Button bg='red.600' onClick={deleteCustomer}>Delete</Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n            <Box display='flex' pt='2rem'  justifyContent='center' color='white'>\r\n                <Box display='flex' flexDir='column' p='1rem' bg='gray.600' rounded='2xl' shadow='md' w={[300, 400, 800]}>\r\n                    <Box display='flex' p='2rem'>\r\n                        <Box>\r\n                            {/* <Text fontSize='25px' letterSpacing='1px' fontWeight='bold'>Customer #{customer.id}</Text> */}\r\n                        </Box>\r\n                        <Box display='flex' flexDir='column' ml='auto'>\r\n                            <Text fontWeight='bold'>Rios Roofing</Text>\r\n                            <Text textAlign='right' fontWeight='light'>150 Tallant St</Text>\r\n                            <Text textAlign='right' fontWeight='light'>Houston, TX </Text>\r\n                            <Text textAlign='right' fontWeight='light'> United States</Text>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box display='flex' justifyContent='space-between' p='1rem'>\r\n                        {/* <Box>\r\n                            <Table variant=\"simple\" size='sm'>\r\n                                <TableCaption color='white'>Customer Information</TableCaption>\r\n                                <Thead>\r\n                                    <Tr>\r\n                                    <Th color='white'>Name</Th>\r\n                                    <Th color='white'>Email</Th>\r\n                                    <Th color='white'>Phone</Th>\r\n                                    <Th color='white'>Address</Th>\r\n                                    <Th isNumeric color='white'>City</Th>\r\n                                    <Th color='white'>State</Th>\r\n                                    <Th color='white'>Zipcode</Th>\r\n                                    </Tr>\r\n                                </Thead>\r\n                                <Tbody>\r\n                                    <Tr>\r\n                                    <Td>{customer.name}</Td>\r\n                                    <Td>{customer.email}</Td>\r\n                                    <Td>{customer.phone_number}</Td>\r\n                                    <Td >{customer.address}</Td>\r\n                                    <Td>{customer.city}</Td>\r\n                                    <Td>{customer.state}</Td>\r\n                                    <Td>{customer.zipcode}</Td>\r\n                                    </Tr>\r\n                                </Tbody>\r\n                            </Table>\r\n                        </Box> */}\r\n                        <Box display='flex' flexDir='column' p='1rem' justifyContent='space-between'>\r\n                            <Box pb='1rem'>\r\n                                <Text fontSize='22px' fontWeight='bold' letterSpacing='1px'>Name:</Text>\r\n                                <Text>{customer.name}</Text> \r\n                                \r\n                            </Box>\r\n                            <Box>\r\n                                <Text fontSize='22px' fontWeight='bold' letterSpacing='1px' >Phone Number:</Text>\r\n                                <Text>{customer.phone_number}</Text>\r\n                            </Box>\r\n                        </Box>\r\n                        <Box display='flex' flexDir='column' p='1rem'>\r\n                            <Box>\r\n                                <Text fontSize='22px' fontWeight='bold' letterSpacing='1px'>Address:</Text>\r\n                            </Box>\r\n                            <Box>\r\n                                {customer.address}\r\n                            </Box>\r\n                            <Box>\r\n                                {customer.city}, {customer.state}, {customer.zipcode}\r\n                            </Box>\r\n                            <Box>\r\n                                United States\r\n                            </Box>\r\n                            \r\n                        </Box>\r\n                        <Box display='flex' flexDir='column' p='1rem'>\r\n                            <Box>\r\n                                <Text fontSize='22px' fontWeight='bold' letterSpacing='1px'>Email: </Text>\r\n                            </Box>\r\n                            {customer.email}\r\n                        </Box>\r\n                    </Box>\r\n                    <Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default CustomerEdit;\r\n","import React, { useEffect } from 'react'\r\nimport { Box, Flex, Avatar, Text, Grid, Button, Badge} from \"@chakra-ui/react\";\r\nimport {ChevronRightIcon, ChevronLeftIcon} from '@chakra-ui/icons'\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport BallotIcon from '@material-ui/icons/Ballot';\r\nimport PersonPinIcon from '@material-ui/icons/PersonPin';\r\nimport PermContactCalendarIcon from '@material-ui/icons/PermContactCalendar';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport swal from 'sweetalert'\r\n\r\nfunction Dashboard() {\r\n\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n        // if a user is logged in, their username will be in Local Storage as 'currentUser' until they log out.\r\n        if (!localStorage.getItem('username')) {\r\n            history.push('/login');\r\n        }\r\n    }, []);\r\n\r\n    const logout = () => {\r\n        localStorage.clear();\r\n        swal(\"Logged Out!\", \"You are now logged out from the system!\", \"success\");\r\n        history.push('/login')\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <Flex flexDir='column' >\r\n                <Box display='flex' justifyContent='flex-end' pt='2rem'>\r\n                    <Button onClick={logout}>Logout</Button>\r\n                </Box>\r\n                <Box display='flex' justifyContent='center' p='3rem' pt='2rem'>\r\n                    <Box display='flex' flexDir='column' justifyContent='center' >\r\n\r\n                        <Text fontWeight='light' fontSize='45px' align='center'>Welcome!</Text>\r\n                        <Box><Text fontSize='18px'>Rios Roofing Web Application by CoogTech</Text></Box>\r\n                    </Box>\r\n                </Box>\r\n                {/* <Box display='flex' pt='1rem'>\r\n                    <Box p='1rem'> \r\n                        <Avatar size='lg' name='username' src='https://64.media.tumblr.com/073578da50f557bd56caef112e255950/b754da231bb4bd69-34/s640x960/4f8c9cf93d4f03c42d448eba0dac2a9cbb2a69e2.jpg'/>\r\n                        \r\n                    </Box>\r\n                    <Box display='flex' flexDir='column' justifyContent='center'>\r\n                        <Text fontSize='25px' fontWeight='black'>SimplyNex</Text>\r\n                        <Text>Welcome! Today is March 31, 2021</Text>\r\n                    </Box>\r\n                    <Box ml='auto' p='1rem'>\r\n                        <Button colorScheme='blue'>Logout</Button>\r\n                    </Box>\r\n                </Box> */}\r\n                {/* <Box display='flex' flexDir='column' pb='1rem' pt='2rem'>\r\n                    <Box>\r\n                        <Text fontSize='30px' fontWeight='black'>Upcoming Jobs</Text>\r\n                    </Box>\r\n                    <Grid p='1rem' gap='3' >\r\n                        <Box display='flex' justifyContent='space-between' bg='gray.700' p='1rem' rounded='xl'>\r\n                            <Box pl='1rem' pr='1rem'>\r\n                                <Badge variant='subtle' colorScheme='green'>Status</Badge>\r\n                            </Box>\r\n                            <Box pl='1rem' pr='1rem'>\r\n                                <Text>Customer Name</Text>\r\n                            </Box>\r\n                            <Box pl='1rem' pr='1rem'>\r\n                                <Text>Phone Number</Text>\r\n                            </Box>\r\n                            <Box pl='1rem' pr='1rem'>\r\n                                <Text>Home Address</Text>\r\n                            </Box>\r\n                            <Box ml='auto'>\r\n                                <ChevronRightIcon fontSize='20px'/>\r\n                            </Box>\r\n\r\n                        </Box>\r\n                        <Box display='flex' justifyContent='space-between' bg='gray.700' p='1rem' rounded='xl'>\r\n                            <Box pl='1rem' pr='1rem'>\r\n                                <Badge variant='subtle' colorScheme='green'>Status</Badge>\r\n                            </Box>\r\n                            <Box pl='1rem' pr='1rem'>\r\n                                <Text>Customer Name</Text>\r\n                            </Box>\r\n                            <Box pl='1rem' pr='1rem'>\r\n                                <Text>Phone Number</Text>\r\n                            </Box>\r\n                            <Box pl='1rem' pr='1rem'>\r\n                                <Text>Home Address</Text>\r\n                            </Box>\r\n                            <Box ml='auto'>\r\n                                <ChevronRightIcon fontSize='20px'/>\r\n                            </Box>\r\n\r\n                        </Box>\r\n                        <Box display='flex' justifyContent='space-between' bg='gray.700' p='1rem' rounded='xl'>\r\n                            <Box pl='1rem' pr='1rem'>\r\n                                <Badge variant='subtle' colorScheme='green'>Status</Badge>\r\n                            </Box>\r\n                            <Box pl='1rem' pr='1rem'>\r\n                                <Text>Customer Name</Text>\r\n                            </Box>\r\n                            <Box pl='1rem' pr='1rem'>\r\n                                <Text>Phone Number</Text>\r\n                            </Box>\r\n                            <Box pl='1rem' pr='1rem'>\r\n                                <Text>Home Address</Text>\r\n                            </Box>\r\n                            <Box ml='auto'>\r\n                                <ChevronRightIcon fontSize='20px'/>\r\n                            </Box>\r\n\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                </Box> */}\r\n                \r\n                <Grid templateColumns='repeat(2, 1fr)' gap='6' pt='1rem' pb='1rem' pl='0rem' color='white'>\r\n                    <Link to='/invoices'>\r\n                        <Box display='flex' flexDir='column' justifyContent='center' p='1rem' boxSize='250px' bg='gray.600' rounded='2xl' shadow='md' _hover={{ bg: \"gray.500\" }}>\r\n                            <Box display='flex' justifyContent='center'>\r\n                                <DescriptionIcon style={{fontSize: 100}} />\r\n                            </Box>\r\n                            <Box display='flex' justifyContent='center' pt='1rem'>\r\n                                <Text fontSize='20px' fontWeight='black'>Invoices</Text>\r\n                            </Box>\r\n                        </Box>\r\n                    </Link>\r\n                    <Link to='/estimates'>\r\n                        <Box display='flex' flexDir='column' justifyContent='center' p='1rem' boxSize='250px' bg='gray.600' rounded='2xl' shadow='md' _hover={{ bg: \"gray.500\" }}>\r\n                            <Box display='flex' justifyContent='center'>\r\n                                <AssignmentIcon style={{fontSize: 100}} />\r\n                            </Box>\r\n                            <Box display='flex' justifyContent='center' pt='1rem'>\r\n                                <Text fontSize='20px' fontWeight='black'>Estimates</Text>\r\n                            </Box>\r\n                        </Box>\r\n                    </Link>\r\n                    {/* <Link to='/schedules'>\r\n                        <Box display='flex' flexDir='column' justifyContent='center' p='1rem' boxSize='280px' bg='gray.700' rounded='2xl' shadow='md' _hover={{ bg: \"gray.600\" }}>\r\n                            <Box display='flex' justifyContent='center'>\r\n                                <AccessTimeIcon style={{fontSize: 100}} />\r\n                            </Box>\r\n                            <Box display='flex' justifyContent='center' pt='1rem'>\r\n                                <Text fontSize='20px' fontWeight='black'>Job Schedule</Text>\r\n                            </Box>\r\n                        </Box>\r\n                    </Link> */}\r\n                    {/* <Link to='/materials'>\r\n                        <Box display='flex' flexDir='column' justifyContent='center' p='1rem' boxSize='280px' bg='gray.700' rounded='2xl' shadow='md' _hover={{ bg: \"gray.600\" }}>\r\n                            <Box display='flex' justifyContent='center'>\r\n                                <BallotIcon style={{fontSize: 100}} />\r\n                            </Box>\r\n                            <Box display='flex' justifyContent='center' pt='1rem'>\r\n                                <Text fontSize='20px' fontWeight='black'>Materials</Text>\r\n                            </Box>\r\n\r\n                        </Box> \r\n                    </Link> */}\r\n                    <Link to='/customers'>\r\n                        <Box display='flex' flexDir='column' justifyContent='center' p='1rem' boxSize='250px' bg='gray.600' rounded='2xl' shadow='md' _hover={{ bg: \"gray.500\" }}>\r\n                                <Box display='flex' justifyContent='center'>\r\n                                    <PersonPinIcon style={{fontSize: 100}} />\r\n                                </Box>\r\n                                <Box display='flex' justifyContent='center' pt='1rem'>\r\n                                    <Text fontSize='20px' fontWeight='black'>Customers</Text>\r\n                                </Box>\r\n                        </Box>\r\n                    </Link>   \r\n                    <Link to='/employees'>\r\n                        <Box display='flex' flexDir='column' justifyContent='center' p='1rem' boxSize='250px' bg='gray.600' rounded='2xl' shadow='md' _hover={{ bg: \"gray.500\" }}>\r\n                            \r\n                            <Box display='flex' justifyContent='center'>\r\n                                <PermContactCalendarIcon style={{fontSize: 100}} />\r\n                            </Box>\r\n                            <Box display='flex' justifyContent='center' pt='1rem'>\r\n                                <Text fontSize='20px' fontWeight='black'>Employees</Text>\r\n                            </Box>\r\n                        </Box>\r\n                    </Link>\r\n\r\n                </Grid>\r\n\r\n            </Flex>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import React, {useEffect, useState, useContext} from 'react'\r\nimport {Select, Badge, Grid, Box, Flex, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, FormControl, FormLabel, Input, InputGroup, InputLeftAddon, Button, FormHelperText, Text, useDisclosure} from '@chakra-ui/react';\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\nimport {Link, Redirect, useHistory} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\nimport {ChevronLeftIcon} from '@chakra-ui/icons'\r\n\r\nconst InvoiceEdit = (props) => { \r\n    \r\n    // React States\r\n    const [invoice, setInvoice] = useState('');\r\n    const [customer, setCustomer] = useState('');\r\n    const [cuStatus, setCuStatus] = useState('');\r\n    const [jobType, setJobType] = useState('');\r\n    \r\n    const [invoiceDate, setInvoiceDate] = useState('');\r\n    const [dueDate, setDueDate] = useState('');\r\n    const [amountDue, setAmountDue] = useState('');\r\n    const [selectInvoiceStatus, setSelectInvoiceStatus] = useState('');\r\n    const [serviceName, setServiceName] = useState('');\r\n    const [selectJobTypeOption, setJobTypeOption] = useState('');\r\n\r\n    // Define variables\r\n    const {id} = props.match.params;\r\n    const url = 'http://localhost:8081/api';\r\n    let history = useHistory();\r\n    const {isOpen, onOpen, onClose} = useDisclosure();\r\n    const initialRef = React.useRef();\r\n\r\n    //React functions\r\n    useEffect(() => {\r\n        // if a user is logged in, their username will be in Local Storage as 'currentUser' until they log out.\r\n        if (!localStorage.getItem('username')) {\r\n            history.push('/login');\r\n        }\r\n        getInvoiceById();\r\n    }, []);\r\n\r\n    // functions created by me to get what I need of data\r\n    const getInvoiceById = async () => {\r\n        await axios.get(`${url}/invoices/${id}`)\r\n        .then((response) => {\r\n            const invoiceById = response.data;\r\n            const cu = response.data.cu;\r\n            const invs = response.data.invs;\r\n            const jtype = response.data.jtype;\r\n            //add our data to state\r\n            setInvoice(invoiceById);\r\n            setCustomer(cu);\r\n            setCuStatus(invs);\r\n            setJobType(jtype);\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`));\r\n    }\r\n\r\n    const handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        const url2 = `http://localhost:8081/api/invoices/${id}`\r\n        const json = {\r\n            jobTypeId: selectJobTypeOption,\r\n            service_name: serviceName,\r\n            inv_date: invoiceDate,\r\n            due_date: dueDate,\r\n            amount_due: `${new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(amountDue)}`\r\n        }\r\n        await axios.put(url2, json)\r\n        .then((response) => {\r\n            console.log('I was submitted', response);\r\n        })\r\n        .catch((err) => {\r\n            console.error(err);\r\n        })\r\n        setJobTypeOption('');\r\n        setSelectInvoiceStatus('');\r\n        setServiceName('');\r\n        setInvoiceDate('');\r\n        setDueDate('');\r\n        setAmountDue('');\r\n        getInvoiceById();\r\n        onClose();\r\n        console.log('Submit Function works!')\r\n        //history.go(0);\r\n    };\r\n\r\n    const statusBadge = () => {\r\n        if(cuStatus.status_name === 'Pending'){\r\n            return(\r\n                <Badge colorScheme='yellow' variant='solid' p='8px' w='110px' textAlign='center'  rounded='xl'>{cuStatus.status_name}</Badge>\r\n            )\r\n        } else if(cuStatus.status_name === 'Paid'){\r\n            return(\r\n                <Badge colorScheme='green' variant='solid' p='8px' w='110px' textAlign='center'  rounded='xl'>{cuStatus.status_name}</Badge>\r\n            )\r\n        } else if(cuStatus.status_name === 'Outstanding') {\r\n            return(\r\n                <Badge colorScheme='red' variant='solid' p='8px' w='110px' textAlign='center'  rounded='xl'>{cuStatus.status_name}</Badge>\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleJobTypeInput = (e) => {\r\n        const selectedValue = e.target.value;\r\n        setJobTypeOption(selectedValue);\r\n    };\r\n\r\n    const deleteInvoice = async () => {\r\n        // console.log('Button will perform a delete to the database.');\r\n        // await axios.delete(`${url}/invoices/${id}`)\r\n        // .then((response) => {\r\n        //     console.log(\"Invoice has been deleted!\")\r\n        //     return <Redirect to='/invoices' />\r\n        // })\r\n        // .catch(error => console.error(`Error: ${error}`));\r\n        // history.push(\"/invoices\")\r\n        await swal({\r\n            title: 'Are you sure?',\r\n            text: 'Once deleted, you will not be able to recover invoice info!',\r\n            icon: 'warning',\r\n            buttons: true,\r\n            dangerMode: true\r\n        })\r\n        .then((willDelete) => {\r\n            if(willDelete) {\r\n                axios.delete(`${url}/invoices/${id}`)\r\n                .then(response => {\r\n                    history.push(\"/invoices\")\r\n                })\r\n                swal(\"Poof! Your invoice has been deleted!\", {\r\n                    icon: \"success\",\r\n                });\r\n            } else {\r\n                swal(\"Your invoice data was not deleted!\");\r\n                history.push(`/editinvoice/${id}`)\r\n            }\r\n        })         \r\n    }\r\n\r\n    const markInvoicePaid = async() => {\r\n        await axios.put(`http://localhost:8081/api/invoices/${id}`, {\r\n            invStatusId : '2'\r\n        })\r\n        .then((response) => {\r\n            getInvoiceById();\r\n            console.log(response);\r\n        })\r\n    };\r\n\r\n    const markInvoicePending = async() => {\r\n        await axios.put(`http://localhost:8081/api/invoices/${id}`, {\r\n            invStatusId: '1'\r\n        })\r\n        .then((response) => {\r\n            getInvoiceById();\r\n            console.log(response);\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`));\r\n    };\r\n\r\n    const markInvoiceOutstanding = async() => {\r\n        await axios.put(`http://localhost:8081/api/invoices/${id}`, {\r\n            invStatusId: '3'\r\n        })\r\n        .then((response) => {\r\n            getInvoiceById();\r\n            console.log(response);\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`));\r\n    };\r\n    \r\n    \r\n    return (\r\n        <Flex direction='column' justifyContent='center' pb='3rem' pt='1rem' w={[300, 400, 800]} >\r\n            <Modal initialFocusRef={initialRef} isOpen={isOpen} onClose={onClose}>\r\n                    <ModalOverlay />\r\n                    <ModalContent p='1rem' ml='6rem'>\r\n                        <ModalHeader textAlign='center'>Edit Invoice</ModalHeader>\r\n                        <Text color='red' textAlign='center'>Fill all fields please!</Text>\r\n                        <ModalCloseButton />\r\n                        <form method='PUT' onSubmit={handleSubmit}>\r\n                        <ModalBody>\r\n                                <FormControl isRequired={true}>\r\n                                    <FormLabel pt='1rem'>Job Type</FormLabel>\r\n                                    <Select defaultValue={null} value={selectJobTypeOption} placeholder='Select Job Type' onChange={(e) => handleJobTypeInput(e)}>\r\n                                        <option value='1'>New Roof Installation</option>\r\n                                        <option value='2'>Roof Repairs</option>\r\n                                        <option value='3'>Structure Construction</option>\r\n                                        <option value='4'>Siding Repair</option>\r\n                                        <option value='5'>Roof Maintenance</option>\r\n                                        <option value='6'>Painting Interior of Home</option>\r\n                                        <option value='6'>Painting Exterior of Home</option>\r\n                                        <option value='6'>Flooring Installation</option>\r\n                                        \r\n                                    </Select>\r\n                                    {/* <Input value={address} onChange={({target}) => setAddress(target.value)} id='address' placeholder='Street address'/> */}\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Invoice Date</FormLabel>\r\n                                    <Input type='date' value={invoiceDate} onChange={({target}) => setInvoiceDate(target.value)} id='invDate' placeholder='Invoice date'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Due Date</FormLabel>\r\n                                    <Input type='date' value={dueDate} onChange={({target}) => setDueDate(target.value)} id='dueDate' placeholder='Due date'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                <FormLabel pt='1rem'>Service Name</FormLabel>\r\n                                    <InputGroup>\r\n                                        <Input value={serviceName} id='service' onChange={({target}) => setServiceName(target.value)} placeholder='Service Name' />\r\n                                    </InputGroup>\r\n                                </FormControl>\r\n                                <FormControl isRequired={true}>\r\n                                    <FormLabel pt='1rem'>Amount Due</FormLabel>\r\n                                    <Input value={amountDue} onChange={({target}) => setAmountDue(target.value)} placeholder='Amount due' type='number'/>\r\n                                </FormControl>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button colorScheme='blue' mr={3} type='submit' onClick={handleSubmit} >Save</Button>\r\n                            <Button onClick={onClose} colorScheme='blue'>Cancel</Button>\r\n                        </ModalFooter>\r\n                        </form>\r\n\r\n                    </ModalContent> \r\n                </Modal>\r\n                <Link to='/invoices'>\r\n                <Box display='flex' pt='1rem' pb='1rem' pl='1rem'>\r\n                    <Box display='flex' _hover={{color: 'blue.400'}}>\r\n                        <ChevronLeftIcon fontSize='35px'/>\r\n                        <Text _hover={{color: \"blue.400\"}} fontWeight='bold' fontSize='20px'>Go Back</Text> \r\n                    </Box>\r\n                </Box>\r\n            </Link>\r\n                    <Box display='flex' pt='1rem' justifyContent='center'>\r\n                        <Box display='flex' p='1rem' bg='gray.600' rounded='2xl' shadow='md' w={[300, 400, 800]}>\r\n                            <Box display='flex' mr='auto' pl='1rem'>\r\n                                <Box display='flex' flexDir='column' justifyContent='center' pr='1rem'>\r\n                                    <Text fontWeight='light' fontSize='18px' fontWeight='bold' color='white'>Status:</Text>\r\n                                </Box>\r\n                                <Box display='flex' flexDir='column' justifyContent='center' >\r\n                                    {/* <Badge colorScheme='yellow' variant='solid' p='8px'>{cuStatus.status_name}</Badge> */}\r\n                                    {statusBadge()}\r\n                                </Box>\r\n                            </Box>\r\n                            <Box display='flex' pr='1rem'>\r\n                                <Box pr='1rem' >\r\n                                    <Button colorScheme='blue' onClick={markInvoiceOutstanding}>Mark Outstanding</Button>\r\n                                </Box>\r\n                                <Box pr='1rem' >\r\n                                    <Button colorScheme='yellow' onClick={markInvoicePending}>Mark Pending</Button>\r\n                                </Box>\r\n                                <Box pr='0rem' >\r\n                                    <Button colorScheme='green' onClick={markInvoicePaid}>Mark Paid</Button>\r\n                                </Box>\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box display='flex' pt='2rem'  justifyContent='center' color='white'>\r\n                        <Box display='flex' flexDir='column' p='1rem' rounded='2xl' bg='gray.600' shadow='md' w={[300, 400, 800]}>\r\n                            <Box display='flex' justifyContent='flex-end' pr='2rem' pt='1rem'>\r\n                                <Button colorScheme='blue' onClick={onOpen}>Edit</Button>\r\n                                <Box pl='1rem'>\r\n                                    <Button colorScheme='red' onClick={deleteInvoice}>Delete</Button>\r\n                                </Box>\r\n                            </Box>\r\n                            <Box display='flex' p='2rem' bg='gray.600' rounded='xl'>\r\n                                <Box>\r\n                                    <Text fontSize='22px' fontWeight='bold' letterSpacing='1px'>Invoice #{invoice.id}</Text>\r\n                                    <Text  fontSize='20px' fontWeight='light' letterSpacing='1px'>{jobType.type_name}</Text>\r\n                                </Box>\r\n                                <Box display='flex' flexDir='column' ml='auto' >\r\n                                    <Text textAlign='right' fontWeight='bold'>Rios Roofing</Text>\r\n                                    <Text textAlign='right' fontWeight='light'>150 Tallant St</Text>\r\n                                    <Text textAlign='right' fontWeight='light'>Houston, TX</Text>\r\n                                    <Text textAlign='right' fontWeight='light'>77076</Text>\r\n                                    <Text textAlign='right' fontWeight='light'>United States</Text>\r\n                                </Box>\r\n                            </Box>\r\n                            <Box display='flex' justifyContent='center' p='1rem' pt='1rem' pb='1rem'>\r\n                                <Box display='flex' flexDir='column' p='1rem' >\r\n                                    <Box pb='1rem'>\r\n                                        {/* <Editable defaultValue={customer.name}>\r\n                                            <EditablePreview/>\r\n                                            <EditableInput/>\r\n                                            <EditableControls/>\r\n                                        </Editable> */}\r\n                                        <Text fontSize='22px' fontWeight='bold'>Invoice Date:</Text>\r\n                                        <Text>{new Date(invoice.inv_date).toLocaleDateString()}</Text>  \r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Text fontSize='22px' fontWeight='bold'>Payment Due:</Text>\r\n                                        <Text>{new Date(invoice.due_date).toLocaleDateString()}</Text>\r\n                                    </Box>\r\n                                </Box>\r\n                                <Box display='flex' flexDir='column' p='1rem' ml='auto' mr='auto'>\r\n                                    <Box>\r\n                                        <Text fontSize='22px' fontWeight='bold' letterSpacing='1px'>Bill To:</Text>\r\n                                    </Box>\r\n                                    <Box pb='4px'>\r\n                                        <Text letterSpacing='1px'>{customer.name}</Text>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Text fontWeight='light' letterSpacing='1px'>{customer.address},</Text>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Text fontWeight='light' letterSpacing='1px'>{customer.city}, {customer.state}, 77076</Text>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Text fontWeight='light' letterSpacing='1px'>{customer.zipcode}</Text>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Text letterSpacing='1px'>United States</Text>\r\n                                    </Box>\r\n                                    \r\n                                </Box>\r\n                                <Box display='flex' flexDir='column' p='1rem'>\r\n                                    <Box>\r\n                                        <Text fontSize='22px' fontWeight='bold'>Email To: </Text>\r\n                                    </Box>\r\n                                    <Text letterSpacing='1px'>{customer.email}</Text>\r\n                                </Box>\r\n                            </Box>\r\n                            <Box display='flex' flexDir='column' p='1rem' >\r\n                                <Box display='flex' flexDir='column' bg='gray.700' p='1rem' roundedTop='xl'>\r\n                                    <Box display='flex' justifyContent='space-between' >\r\n                                            <Box ml='1rem'>\r\n                                                <Text letterSpacing='1px' fontSize='18px' fontWeight='bold'>Service Name</Text>    \r\n                                            </Box> \r\n                                            <Box>\r\n                                                {/* <Text letterSpacing='1px' fontSize='18px' fontWeight='bold'>QTY.</Text> */}\r\n                                            </Box>\r\n                                            <Box>\r\n                                                <Text letterSpacing='1px' fontSize='18px' fontWeight='bold'>Price</Text>\r\n                                            </Box>\r\n                                            <Box mr='1rem'>\r\n                                                <Text letterSpacing='1px' fontSize='18px' fontWeight='bold'>Total</Text>\r\n                                            </Box>\r\n                                    </Box>\r\n                                    <Box display='flex' justifyContent='space-between' pt='1rem' pb='1rem' >\r\n                                            <Box ml='1rem'>\r\n                                                <Text letterSpacing='1px' fontSize='16px' fontWeight='light'>{invoice.service_name}</Text>    \r\n                                            </Box> \r\n                                            <Box>\r\n                                                {/* <Text letterSpacing='1px' fontSize='16px' fontWeight='bold'>1</Text> */}\r\n                                            </Box>\r\n                                            <Box>\r\n                                                <Text letterSpacing='1px' fontSize='16px' fontWeight='bold'>{invoice.amount_due}</Text>\r\n                                            </Box>\r\n                                            <Box mr='1rem'>\r\n                                                <Text letterSpacing='1px'  fontSize='16px' fontWeight='bold'>{invoice.amount_due}</Text>\r\n                                            </Box>\r\n                                    </Box>\r\n                                </Box>\r\n                                <Box display='flex'  bg='blue.600' p='2rem' roundedBottom='xl'>\r\n                                        <Box ml='auto'>\r\n                                            <Text fontWeight='bold' letterSpacing='1px' fontSize='22px'>Amount Due:</Text>\r\n                                        </Box>\r\n                                        <Box ml='4rem' >\r\n                                            <Text fontWeight='bold' letterSpacing='1px' fontSize='22px'>{invoice.amount_due}</Text>\r\n                                        </Box>\r\n                                    </Box>\r\n                                        \r\n                            </Box>\r\n                            <Grid>\r\n\r\n                            </Grid>\r\n                        </Box>\r\n                    </Box>\r\n            </Flex>\r\n    )\r\n}\r\n\r\nexport default InvoiceEdit;\r\n","import React, {useEffect, useState} from 'react'\r\nimport { Box, Flex , Text, ModalBody, Modal, ModalContent, ModalFooter, ModalHeader, ModalOverlay, FormHelperText, useDisclosure, ModalCloseButton, ButtonGroup, IconButton, Editable, EditablePreview, EditableInput, Badge, Button, Grid, PopoverContent, FormControl, FormLabel, Input, Alert, AlertIcon } from \"@chakra-ui/react\";\r\nimport {ChevronRightIcon, ChevronLeftIcon, CheckIcon, CloseIcon, EditIcon, ArrowLeftIcon} from '@chakra-ui/icons'\r\nimport {Link, Redirect, useHistory} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Employee from './Employee';\r\nimport Select from \"react-select\";\r\nimport swal from 'sweetalert';\r\n\r\nconst EmployeeEdit = (props) => {\r\n    const {id} = props.match.params;\r\n    let history = useHistory();\r\n    const url = 'http://localhost:8081/api';\r\n    const {isOpen, onOpen, onClose} = useDisclosure();\r\n    const initialRef = React.useRef();\r\n\r\n    //GET data from API\r\n    const [Employees, setEmployees] = useState(''); \r\n    \r\n    // States that pick up the values from the input fields of the form\r\n    const [name, setCustomerName] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [city, setCity] = useState('');\r\n    const [state, setState] = useState('');\r\n    const [zipcode, setZipcode] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [payrate, setPayRate] = useState('');\r\n    const [selectField, setSelectField] = useState('');\r\n    const [inputValue, SetInputValue] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        // if a user is logged in, their username will be in Local Storage as 'currentUser' until they log out.\r\n        if (!localStorage.getItem('username')) {\r\n            history.push('/login');\r\n        }\r\n        getAllEmployees();\r\n    }, []);\r\n\r\n    // componentDidMount() {\r\n    //     getAllCustomer();\r\n    // }\r\n    \r\n    const getAllEmployees = async () => {\r\n        await axios.get(`${url}/employees/${id}`)\r\n        .then((response) => {\r\n            const allEmployees = response.data\r\n            //add our data to state\r\n            setEmployees(allEmployees);\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`));\r\n    }\r\n\r\n    const deleteCustomer = async () => {\r\n        // console.log('Button will perform a delete to the database.');\r\n        // await axios.delete(`${url}/employees/${id}`)\r\n        // .then((response) => {\r\n        //     console.log(\"Employee has been deleted!\")\r\n        //     return <Redirect to='/customers' />\r\n        // })\r\n        // .catch(error => console.error(`Error: ${error}`));\r\n        // history.push(\"/employees\")\r\n        await swal({\r\n            title: 'Are you sure?',\r\n            text: 'Once deleted, you will not be able to recover employee info!',\r\n            icon: 'warning',\r\n            buttons: true,\r\n            dangerMode: true\r\n        })\r\n        .then((willDelete) => {\r\n            if(willDelete) {\r\n                axios.delete(`${url}/employees/${id}`)\r\n                .then(response => {\r\n                    history.push(\"/employees\")\r\n                })\r\n                swal(\"Poof! Your employee has been deleted!\", {\r\n                    icon: \"success\",\r\n                });\r\n            } else {\r\n                swal(\"Your employee data was not deleted!\");\r\n                history.push(`/editemployee/${id}`)\r\n            }\r\n        }) \r\n                \r\n    }\r\n\r\n    const handlePhoneInput = (e) => {\r\n        //This is where we'll call our future formatPhoneNumber function\r\n        const formattedPhoneNumber = formatPhoneNumber(e.target.value);\r\n        //We'll set the input value using our setInputValue\r\n        SetInputValue(formattedPhoneNumber);\r\n    }  \r\n\r\n    const fieldOptions = [\r\n        { value: '1', label: 'Employee Name'},\r\n        { value: '2', label: 'Address'},\r\n        { value: '3', label: 'City'},\r\n        { value: '4', label: 'State'},\r\n        { value: '5', label: 'Zipcode'},\r\n        { value: '6', label: 'Phone Number'},\r\n        { value: '7', label: 'Email'},\r\n        { value: '8', label: 'Payrate'},\r\n        { value: '9', label: 'All Fields'}\r\n    ];\r\n\r\n    const handleInputField = (selectField) => {\r\n        setSelectField(selectField.value);\r\n        console.log(selectField);\r\n\r\n    }\r\n\r\n    const renderInputField = ()=> {\r\n        if(selectField === '1'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={name} onChange={({target}) => setCustomerName(target.value)} id='name' ref={initialRef} placeholder='Employee Name'/>\r\n                    <FormHelperText>Current Name: {Employees.emp_name}</FormHelperText>\r\n                </Box>\r\n                \r\n            )\r\n        } else if(selectField === '2'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={address} onChange={({target}) => setAddress(target.value)} id='address' placeholder='Street address'/>\r\n                    <FormHelperText>Current Address: {Employees.address}</FormHelperText>\r\n                </Box>\r\n            )\r\n        } else if(selectField === '3'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={city} onChange={({target}) => setCity(target.value)} id='city' placeholder='City'/>\r\n                    <FormHelperText>Current City: {Employees.state}</FormHelperText>\r\n                </Box>\r\n            )   \r\n        } else if(selectField === '4'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={state} onChange={({target}) => setState(target.value)} id='state' placeholder='State'/>\r\n                    <FormHelperText>Current City: {Employees.city}</FormHelperText>\r\n                </Box>\r\n            )\r\n        } else if(selectField === '5'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={zipcode} onChange={({target}) => setZipcode(target.value)} id='zipcode' placeholder='Zipcode'/>\r\n                    <FormHelperText>Current Zipcode: {Employees.zipcode}</FormHelperText>\r\n                </Box>\r\n            )\r\n        } else if(selectField === '6'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input id='phone' type='tel' placeholder='Phone number' onChange={(e) => handlePhoneInput(e)} value={inputValue}/>\r\n                    <FormHelperText>Current Phone Number: {Employees.phone_number}</FormHelperText>\r\n                </Box>\r\n            )\r\n        } else if(selectField === '7'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={email} onChange={({target}) => setEmail(target.value)} placeholder='Email Address' type='email'/>\r\n                    <FormHelperText>Current Email: {Employees.email}</FormHelperText>\r\n                </Box>\r\n            )\r\n        } else if(selectField === '8'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Input value={payrate} onChange={({target}) => setPayRate(target.value)} placeholder='Payrate' type='number'/>\r\n                    <FormHelperText>Current Payrate: ${Employees.payrate}</FormHelperText>\r\n                </Box>\r\n            )    \r\n        } else if(selectField === '9'){\r\n            return(\r\n                <Box pt='1rem' pb='1rem'>\r\n                    <Box pb='1rem'>\r\n                        <FormLabel>Customer Name: </FormLabel>\r\n                        <Input value={name} onChange={({target}) => setCustomerName(target.value)} id='name' ref={initialRef} placeholder='Customer Name'/>\r\n                        <FormHelperText>Current Name: {Employees.name}</FormHelperText>\r\n                    </Box>\r\n                    <Box pb='1rem'>\r\n                        <FormLabel>Address: </FormLabel>\r\n                        <Input value={address} onChange={({target}) => setAddress(target.value)} id='address' placeholder='Street address'/>\r\n                        <FormHelperText>Current Address: {Employees.address}</FormHelperText>\r\n                    </Box >\r\n                    <Box  pb='1rem'>\r\n                        <FormLabel>City: </FormLabel>\r\n                        <Input value={city} onChange={({target}) => setCity(target.value)} id='city' placeholder='City'/>\r\n                        <FormHelperText>Current City: {Employees.city}</FormHelperText>\r\n                    </Box>\r\n                    <Box  pb='1rem'>\r\n                        <FormLabel>State: </FormLabel>\r\n                        <Input value={state} onChange={({target}) => setState(target.value)} id='state' placeholder='State'/>\r\n                        <FormHelperText>Current State: {Employees.state}</FormHelperText>\r\n                    </Box>\r\n                    <Box  pb='1rem'>\r\n                        <FormLabel>Zipcode: </FormLabel>\r\n                        <Input value={zipcode} onChange={({target}) => setZipcode(target.value)} id='zipcode' placeholder='Zipcode'/>\r\n                        <FormHelperText>Current Zipcode: {Employees.zipcode}</FormHelperText>\r\n                    </Box>\r\n                    <Box pb='1rem'>\r\n                        <FormLabel>Phone Number: </FormLabel>\r\n                        <Input id='phone' type='tel' placeholder='Phone number' onChange={(e) => handlePhoneInput(e)} value={inputValue}/>\r\n                        <FormHelperText>Current Name: {Employees.phone_number}</FormHelperText>\r\n                    </Box>\r\n                    <Box pt='1rem' >\r\n                        <FormLabel>Email: </FormLabel>\r\n                        <Input value={email} onChange={({target}) => setEmail(target.value)} placeholder='Email Address' type='email'/>\r\n                        <FormHelperText>Current Name: {Employees.email}</FormHelperText>\r\n                    </Box>  \r\n                </Box>\r\n                \r\n            )\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        const url2 = `http://localhost:8081/api/employees/${id}`\r\n        const json = {\r\n            name: name,\r\n            address: address,\r\n            city: city,\r\n            state: state,\r\n            zipcode: zipcode,\r\n            phone_number: inputValue,\r\n            email: email\r\n        }\r\n        console.log('Submit Function works!');\r\n        \r\n        if(selectField === '1'){\r\n            await axios.put(url2, {\r\n                emp_name: name\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '2'){\r\n            await axios.put(url2, {\r\n                address: address\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '3'){\r\n            await axios.put(url2, {\r\n                city: city\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '4'){\r\n            await axios.put(url2, {\r\n                state: state\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '5'){\r\n            await axios.put(url2, {\r\n                zipcode: zipcode\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '6'){\r\n            await axios.put(url2, {\r\n                phone_number: inputValue\r\n            })\r\n        } else if(selectField === '7'){\r\n            await axios.put(url2, {\r\n                email: email\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '8'){\r\n            await axios.put(url2, {\r\n                payrate: `${payrate}`\r\n            })\r\n            .then((response) => {\r\n                console.log('All fields have been updated!', response);\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        } else if(selectField === '9'){\r\n            await axios.put(url2, json)\r\n            .then((response) => {\r\n                console.log('All fields have been updated!', response);\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            })\r\n        }\r\n\r\n        getAllEmployees();\r\n        setCustomerName('');\r\n        setAddress('');\r\n        setCity('');\r\n        setZipcode('');\r\n        SetInputValue('');\r\n        setEmail('');\r\n        setPayRate('');\r\n        setSelectField('');\r\n        onClose()\r\n\r\n    };\r\n\r\n    const closeButton = () => {\r\n        getAllEmployees();\r\n        setCustomerName('');\r\n        setAddress('');\r\n        setCity('');\r\n        setZipcode('');\r\n        SetInputValue('');\r\n        setEmail('');\r\n        setSelectField('');\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Flex direction='column' justifyContent='center' pb='2rem' pt='2rem' w={[300, 400, 800]} >\r\n             <Modal initialFocusRef={initialRef} isOpen={isOpen} onClose={onClose}>\r\n                    <ModalOverlay />\r\n                    <ModalContent p='1rem' ml='6rem'>\r\n                        <ModalHeader textAlign='center' letterSpacing='1px'>Edit Employee</ModalHeader>\r\n                        <Text color='red' textAlign='center'>Fill all fields please!</Text>\r\n                        <ModalCloseButton />\r\n                        <form method='PUT' onSubmit={handleSubmit}>\r\n                        <ModalBody>\r\n                            <FormControl>\r\n                                <FormLabel>Select Field:</FormLabel>\r\n                                    <Select\r\n                                    options={fieldOptions}\r\n                                    onChange={handleInputField}\r\n                                    theme={theme => ({\r\n                                        ...theme,\r\n                                        borderRadius: 0,\r\n                                        colors: {\r\n                                            ...theme.colors,\r\n                                            primary25: 'primary',\r\n                                            primary: 'black',\r\n                                            neutral0: 'white',\r\n                                            neutral90: 'white',\r\n                                        },\r\n                                    })}/>\r\n                                    {renderInputField()}\r\n                            </FormControl>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button colorScheme='blue' mr={3} type='submit' onClick={handleSubmit} >Update</Button>\r\n                            <Button onClick={closeButton} colorScheme='blue'>Cancel</Button>\r\n                        </ModalFooter>\r\n                        </form>\r\n\r\n                    </ModalContent> \r\n                </Modal>\r\n            <Link to='/employees'>\r\n                <Box display='flex' pt='1rem' pb='1rem' pl='1rem'>\r\n                    <Box display='flex' _hover={{color: 'blue.400'}}>\r\n                        <ChevronLeftIcon fontSize='35px'/>\r\n                        <Text _hover={{color: \"blue.400\"}} fontWeight='bold' fontSize='20px'>Go Back</Text> \r\n                    </Box>\r\n                </Box>\r\n            </Link>\r\n            <Box display='flex' pt='1rem' justifyContent='center'>\r\n                <Box display='flex' p='1rem' bg='gray.600' rounded='2xl' shadow='md' w={[300, 400, 800]}>\r\n                    <Box display='flex' mr='auto' pl='1rem'>\r\n                        <Box display='flex' flexDir='column' justifyContent='center' pr='1rem'>\r\n                            <Text fontWeight='bold' fontSize='20px' color='white'>Status:</Text>\r\n                        </Box>\r\n                        <Box >\r\n                            <Badge bg='green.600' p='8px'>Active</Badge>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box display='flex' pr='1rem'>\r\n                        <Box pr='1rem'>\r\n                            <Button onClick={onOpen}>Edit</Button>\r\n                        </Box>\r\n                        <Box  color='white'>\r\n                                <Button bg='red.600' onClick={deleteCustomer}>Delete</Button>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n            <Box display='flex' pt='2rem'  justifyContent='center' color='white'>\r\n                <Box display='flex' flexDir='column' p='1rem' bg='gray.600' rounded='2xl' shadow='md' w={[300, 400, 800]}>\r\n                    <Box display='flex' p='2rem'>\r\n                        <Box >\r\n                            <Text fontWeight='bold'>Employee:</Text>\r\n                            <Text fontSize='30px' fontWeight='regular'> #{Employees.id}</Text>\r\n                        </Box>\r\n                        <Box display='flex' flexDir='column' ml='auto'>\r\n                            <Text>150 Tallant St</Text>\r\n                            <Text>Houston, TX </Text>\r\n                            <Text> United States</Text>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box display='flex' justifyContent='space-between' p='1rem'>\r\n                        <Box display='flex' flexDir='column' p='1rem' justifyContent='space-between'>\r\n                            <Box pb='1rem'>\r\n                                {/* <Editable defaultValue={customer.name}>\r\n                                    <EditablePreview/>\r\n                                    <EditableInput/>\r\n                                    <EditableControls/>\r\n                                </Editable> */}\r\n                                <Text fontWeight='bold'>Name:</Text>\r\n                                <Text>{Employees.emp_name}</Text> \r\n                                \r\n                            </Box>\r\n                            <Box>\r\n                                <Text fontWeight='bold'>Phone Number:</Text>\r\n                                <Text>{Employees.phone_number}</Text>\r\n                            </Box>\r\n                        </Box>\r\n                        <Box display='flex' flexDir='column' p='1rem'>\r\n                            <Box>\r\n                                <Text fontWeight='bold'>Address:</Text>\r\n                            </Box>\r\n                            <Box>\r\n                                {Employees.address}\r\n                            </Box>\r\n                            <Box>\r\n                                {Employees.city}, {Employees.state}, {Employees.zipcode}\r\n                            </Box>\r\n                            <Box>\r\n                                United States\r\n                            </Box>\r\n                            \r\n                        </Box>\r\n                        <Box display='flex' flexDir='column' p='1rem'>\r\n                            <Box>\r\n                                <Text fontWeight='bold'>Email: </Text>\r\n                                <Text>{Employees.email}</Text>\r\n                            </Box>\r\n                            <Box>\r\n                                <Text fontWeight='bold'>Payrate:</Text>\r\n                                <Text>${Employees.payrate} per sq.</Text>\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n                    <Grid>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nfunction formatPhoneNumber(value) {\r\n    //if value is falsy eg if the user deletes the input, then just return \r\n    if(!value) return value;\r\n\r\n    //clean the input for any non-digit values.\r\n    const phoneNumber = value.replace(/[^\\d]/g, \"\");\r\n\r\n    // phoneNumberLength is used to know when to apply our formatting for the phone number\r\n    const phoneNumberLength = phoneNumber.length;\r\n\r\n    // we need to return the value with no formatting if its less then four digits\r\n    // this is to avoid weird behavior that occurs if you  format the area code to early\r\n    if (phoneNumberLength < 4) return phoneNumber;\r\n\r\n    // if phoneNumberLength is greater than 4 and less the 7 we start to return\r\n    // the formatted number\r\n    if (phoneNumberLength < 7) {\r\n        return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\r\n    }\r\n\r\n    // finally, if the phoneNumberLength is greater then seven, we add the last\r\n    // bit of formatting and return it.\r\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(\r\n        3,\r\n        6\r\n    )}-${phoneNumber.slice(6, 10)}`;\r\n}\r\n\r\nexport default EmployeeEdit;\r\n","import React, {useEffect, useState, useContext} from 'react'\r\nimport {Select, Badge, Grid, Box, Flex, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, FormControl, FormLabel, Input, InputGroup, InputLeftAddon, Button, FormHelperText, Text, useDisclosure} from '@chakra-ui/react';\r\nimport {ChevronRightIcon, ChevronLeftIcon, CheckIcon, CloseIcon, EditIcon} from '@chakra-ui/icons';\r\nimport {Link, Redirect, useHistory} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\n\r\nconst EstimateEdit = (props) => {\r\n\r\n    // React States\r\n    const [invoice, setInvoice] = useState('');\r\n    const [customer, setCustomer] = useState('');\r\n    const [cuStatus, setCuStatus] = useState('');\r\n    const [jobType, setJobType] = useState('');\r\n    const [estDate, setEstDate] = useState('');\r\n    const [expDate, setExpDate] = useState('');\r\n    const [serviceName, setServiceName] = useState('');\r\n    const [quotePrice, setQuotePrice] = useState('');\r\n    const [sqMeasurement, setSqMeasurement] = useState('');\r\n\r\n    // Define variables\r\n    const {id} = props.match.params;\r\n    const url = 'http://localhost:8081/api';\r\n    const {isOpen, onOpen, onClose} = useDisclosure();\r\n    const initialRef = React.useRef();\r\n    let history = useHistory();\r\n\r\n    //React functions\r\n    useEffect(() => {\r\n        // if a user is logged in, their username will be in Local Storage as 'currentUser' until they log out.\r\n        if (!localStorage.getItem('username')) {\r\n            history.push('/login');\r\n        }\r\n        getInvoiceById();\r\n    }, []);\r\n\r\n    // functions created by me to get what I need of data\r\n    const getInvoiceById = async () => {\r\n        await axios.get(`${url}/estimates/${id}`)\r\n        .then((response) => {\r\n            const invoiceById = response.data;\r\n            const cu = response.data.cu;\r\n            const ets = response.data.ets;\r\n            const jtype = response.data.jtype;\r\n            //add our data to state\r\n            setInvoice(invoiceById);\r\n            setCustomer(cu);\r\n            setCuStatus(ets);\r\n            console.log(invoiceById);\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`));\r\n    }   \r\n\r\n    const statusBadge = () => {\r\n        if(cuStatus.status_name === 'Pending'){\r\n            return(\r\n                <Badge colorScheme='yellow' variant='solid' p='8px' rounded='xl'>{cuStatus.status_name}</Badge>\r\n            )\r\n        } else if(cuStatus.status_name === 'Approved'){\r\n            return(\r\n                <Badge colorScheme='green' variant='solid' p='8px' rounded='xl'>{cuStatus.status_name}</Badge>\r\n            )\r\n        } else if(cuStatus.status_name === 'Expired') {\r\n            return(\r\n                <Badge colorScheme='red' variant='solid' p='8px' w='110px' textAlign='center'  rounded='xl'>{cuStatus.status_name}</Badge>\r\n            )\r\n        }\r\n    }\r\n\r\n    const deleteEstimate = async () => {\r\n        // console.log('Button will perform a delete to the database.');\r\n        await swal({\r\n            title: 'Are you sure?',\r\n            text: 'Once deleted, you will not be able to recover estimate info!',\r\n            icon: 'warning',\r\n            buttons: true,\r\n            dangerMode: true\r\n        })\r\n        .then((willDelete) => {\r\n            if(willDelete) {\r\n                axios.delete(`${url}/estimates/${id}`)\r\n                .then(response => {\r\n                    history.push(\"/estimates\")\r\n                })\r\n                swal(\"Poof! Your estimate has been deleted!\", {\r\n                    icon: \"success\",\r\n                });\r\n            } else {\r\n                swal(\"Your estimate data was not deleted!\");\r\n                history.push(`/editestimate/${id}`)\r\n            }\r\n        }) \r\n                \r\n    }\r\n\r\n    const markEstimateApproved = async() => {\r\n        await axios.put(`http://localhost:8081/api/estimates/${id}`, {\r\n            etStatusId : '2'\r\n        })\r\n        .then((response) => {\r\n            getInvoiceById();\r\n            console.log(response);\r\n        })\r\n    };\r\n\r\n    const markEstimatePending = async() => {\r\n        await axios.put(`http://localhost:8081/api/estimates/${id}`, {\r\n            etStatusId: '1'\r\n        })\r\n        .then((response) => {\r\n            getInvoiceById();\r\n            console.log(response);\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`));\r\n    };\r\n\r\n    const markEstimateExpired = async() => {\r\n        await axios.put(`http://localhost:8081/api/estimates/${id}`, {\r\n            etStatusId: '3'\r\n        })\r\n        .then((response) => {\r\n            getInvoiceById();\r\n            console.log(response);\r\n        })\r\n        .catch(error => console.error(`Error: ${error}`));\r\n    };\r\n\r\n    const handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        const url2 = `http://localhost:8081/api/estimates/${id}`\r\n        const json = {\r\n            estimate_date: estDate,\r\n            exp_date: expDate,\r\n            sqft_measurement: sqMeasurement,\r\n            service_name: serviceName,\r\n            quote_price: `${new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(quotePrice)}`,\r\n        }\r\n        await axios.put(url2, json)\r\n        .then((response) => {\r\n            console.log('I was submitted', response);\r\n        })\r\n        .catch((err) => {\r\n            console.error(err);\r\n        })\r\n        // setJobTypeOption('');\r\n        // setSelectInvoiceStatus('');\r\n        setServiceName('');\r\n        setEstDate('');\r\n        setExpDate('');\r\n        setQuotePrice('');\r\n        // setInvoiceDate('');\r\n        // setDueDate('');\r\n        // setAmountDue('');\r\n        getInvoiceById();\r\n        onClose();\r\n        console.log('Submit Function works!')\r\n        //history.go(0);\r\n    };\r\n\r\n    const convertToInvoice = async() => {\r\n        await swal({\r\n            title: 'Are you sure?',\r\n            text: 'Once transferred, you will need to update invoice info with correct jobtype and due date!',\r\n            icon: 'warning',\r\n            buttons: true,\r\n            dangerMode: true\r\n        })\r\n        .then((willDelete) => {\r\n            if(willDelete) {\r\n                axios.post('http://localhost:8081/api/invoices/add', {\r\n                    customerId: invoice.customerId,\r\n                    jobTypeId: '1',\r\n                    invStatusId: '2',\r\n                    service_name: invoice.service_name,\r\n                    inv_date: invoice.estimate_date,\r\n                    due_date: invoice.exp_date,\r\n                    amount_due: invoice.quote_price\r\n                })\r\n                .then(response => {\r\n                    history.push(\"/invoices\")\r\n                })\r\n                swal(\"Poof! Your estimate has been transferred!\", {\r\n                    icon: \"success\",\r\n                });\r\n            } else {\r\n                swal(\"Your estimate data was not converted!\");\r\n                history.push(`/editestimate/${id}`)\r\n            }\r\n        }) \r\n    }\r\n\r\n    return(\r\n        <Flex direction='column' justifyContent='center' pb='1rem' pt='1rem' w={[300, 400, 800]} >\r\n                <Modal initialFocusRef={initialRef} isOpen={isOpen} onClose={onClose}>\r\n                    <ModalOverlay />\r\n                    <ModalContent p='1rem' ml='6rem'>\r\n                        <ModalHeader textAlign='center'>Edit Estimate</ModalHeader>\r\n                        <Text color='red' textAlign='center'>Fill all fields please!</Text>\r\n                        <ModalCloseButton />\r\n                        <form method='PUT' onSubmit={handleSubmit}>\r\n                        <ModalBody>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Estimate Date</FormLabel>\r\n                                    <Input type='date' value={estDate} onChange={({target}) => setEstDate(target.value)} id='invDate' placeholder='Invoice date'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                    <FormLabel pt='1rem'>Expiration Date</FormLabel>\r\n                                    <Input type='date' value={expDate} onChange={({target}) => setExpDate(target.value)} id='dueDate' placeholder='Due date'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired>\r\n                                <FormLabel pt='1rem'>Service Name</FormLabel>\r\n                                    <InputGroup>\r\n                                        <Input value={serviceName} id='service' onChange={({target}) => setServiceName(target.value)} placeholder='Service Name' />\r\n                                    </InputGroup>\r\n                                </FormControl>\r\n                                <FormControl isRequired={true}>\r\n                                    <FormLabel pt='1rem'>Quoted Price</FormLabel>\r\n                                    <Input value={quotePrice} onChange={({target}) => setQuotePrice(target.value)} placeholder='Quote price' type='number'/>\r\n                                </FormControl>\r\n                                <FormControl isRequired={true}>\r\n                                    <FormLabel pt='1rem'>SQ FT Measurement</FormLabel>\r\n                                    <Input value={sqMeasurement} onChange={({target}) => setSqMeasurement(target.value)} placeholder='Square Feet' type='number'></Input>\r\n                                </FormControl>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button colorScheme='blue' mr={3} type='submit' onClick={handleSubmit} >Save</Button>\r\n                            <Button onClick={onClose} colorScheme='blue'>Cancel</Button>\r\n                        </ModalFooter>\r\n                        </form>\r\n                    </ModalContent> \r\n                </Modal>\r\n                <Link to='/estimates'>\r\n                <Box display='flex' pt='1rem' pb='1rem' pl='1rem'>\r\n                    <Box display='flex' _hover={{color: 'blue.400'}}>\r\n                        <ChevronLeftIcon fontSize='35px'/>\r\n                        <Text _hover={{color: \"blue.400\"}} fontWeight='bold' fontSize='20px'>Go Back</Text> \r\n                    </Box>\r\n                </Box>\r\n            </Link>\r\n                    <Box display='flex' pt='1rem' justifyContent='center'>\r\n                        <Box display='flex' p='1rem' bg='gray.600' rounded='2xl' shadow='md' w={[300, 400, 800]}>\r\n                            <Box display='flex' mr='auto' pl='1rem'>\r\n                                <Box display='flex' flexDir='column' justifyContent='center' pr='1rem'>\r\n                                    <Text fontWeight='light' fontSize='18px' color='white'>Status:</Text>\r\n                                </Box>\r\n                                <Box display='flex' flexDir='column' justifyContent='center' >\r\n                                    {/* <Badge colorScheme='yellow' variant='solid' p='8px'>{cuStatus.status_name}</Badge> */}\r\n                                    {statusBadge()}\r\n                                </Box>\r\n                            </Box>\r\n                            <Box display='flex' pr='1rem'>\r\n                                <Box pr='1rem' >\r\n                                    <Button colorScheme='yellow' onClick={markEstimatePending}>Mark Pending</Button>\r\n                                </Box>\r\n                                <Box pr='1rem'>\r\n                                    <Button colorScheme='green' onClick={markEstimateApproved}>Approved</Button>\r\n                                </Box>\r\n                                <Box pr='1rem' >\r\n                                    <Button colorScheme='red' onClick={markEstimateExpired}>Mark Expired</Button>\r\n                                </Box>\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box display='flex' pt='2rem'  justifyContent='center' color='white'>\r\n                        <Box display='flex' flexDir='column' p='1rem' rounded='2xl' bg='gray.600' shadow='md' w={[300, 400, 800]}>\r\n                            <Box display='flex' justifyContent='flex-end' pr='2rem' pt='1rem'>\r\n                                <Box pr='1rem' >\r\n                                    <Button bg='white' color='green' onClick={convertToInvoice}>Convert To Invoice</Button>\r\n                                </Box>\r\n                                <Box>\r\n                                    <Button colorScheme='blue' onClick={onOpen}>Edit</Button>\r\n                                </Box>\r\n                                <Box pl='1rem'>\r\n                                    <Button colorScheme='red' onClick={deleteEstimate}>Delete</Button>\r\n                                </Box>\r\n                            </Box>\r\n                            <Box display='flex' p='2rem' bg='gray.600' rounded='xl'>\r\n                                <Box>\r\n                                    <Text fontSize='22px' fontWeight='bold' letterSpacing='1px'>Estimate #{invoice.id}</Text>\r\n                                    <Text  fontSize='20px' fontWeight='light' letterSpacing='1px'>{jobType.type_name}</Text>\r\n                                </Box>\r\n                                <Box display='flex' flexDir='column' ml='auto' >\r\n                                    <Text textAlign='right' fontWeight='bold'>Rios Roofing</Text>\r\n                                    <Text textAlign='right' fontWeight='light'>150 Tallant St</Text>\r\n                                    <Text textAlign='right' fontWeight='light'>Houston, TX</Text>\r\n                                    <Text textAlign='right' fontWeight='light'>77076</Text>\r\n                                    <Text textAlign='right' fontWeight='light'>United States</Text>\r\n                                </Box>\r\n                            </Box>\r\n                            <Box display='flex' justifyContent='center' p='1rem' pt='1rem' pb='1rem'>\r\n                                <Box display='flex' flexDir='column' p='1rem' >\r\n                                    <Box pb='1rem'>\r\n                                        {/* <Editable defaultValue={customer.name}>\r\n                                            <EditablePreview/>\r\n                                            <EditableInput/>\r\n                                            <EditableControls/>\r\n                                        </Editable> */}\r\n                                        <Text fontSize='22px' fontWeight='bold'>Estimate Date:</Text>\r\n                                        <Text>{new Date(invoice.estimate_date).toLocaleDateString()}</Text>  \r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Text fontSize='22px' fontWeight='bold'>Expiration Date:</Text>\r\n                                        <Text>{new Date(invoice.exp_date).toLocaleDateString()}</Text>\r\n                                    </Box>\r\n                                </Box>\r\n                                <Box display='flex' flexDir='column' p='1rem' ml='auto' mr='auto'>\r\n                                    <Box>\r\n                                        <Text fontSize='22px' fontWeight='bold' letterSpacing='1px'>EST For:</Text>\r\n                                    </Box>\r\n                                    <Box pb='4px'>\r\n                                        <Text letterSpacing='1px'>{customer.name}</Text>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Text fontWeight='light' letterSpacing='1px'>{customer.address},</Text>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Text fontWeight='light' letterSpacing='1px'>{customer.city}, {customer.state},</Text>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Text fontWeight='light' letterSpacing='1px'>{customer.zipcode}</Text>\r\n                                    </Box>\r\n                                    <Box>\r\n                                        <Text letterSpacing='1px'>United States</Text>\r\n                                    </Box>\r\n                                    \r\n                                </Box>\r\n                                <Box display='flex' flexDir='column' p='1rem'>\r\n                                    <Box>\r\n                                        <Text fontSize='22px' fontWeight='bold'>Email To: </Text>\r\n                                    </Box>\r\n                                    <Text letterSpacing='1px'>{customer.email}</Text>\r\n                                </Box>\r\n                            </Box>\r\n                            <Box display='flex' flexDir='column' p='1rem' >\r\n                                <Box display='flex' flexDir='column' bg='gray.700' p='1rem' roundedTop='xl'>\r\n                                    <Box display='flex' justifyContent='space-between' >\r\n                                            <Box ml='1rem'>\r\n                                                <Text letterSpacing='1px' fontSize='18px' fontWeight='bold'>Service Name</Text>    \r\n                                            </Box> \r\n                                            <Box>\r\n                                                {/* <Text letterSpacing='1px' fontSize='18px' fontWeight='bold'>QTY.</Text> */}\r\n                                            </Box>\r\n                                            <Box>\r\n                                                <Text letterSpacing='1px' fontSize='18px' fontWeight='bold'>Price</Text>\r\n                                            </Box>\r\n                                            <Box mr='1rem'>\r\n                                                <Text letterSpacing='1px' fontSize='18px' fontWeight='bold'>Total</Text>\r\n                                            </Box>\r\n                                    </Box>\r\n                                    <Box display='flex' justifyContent='space-between' pt='1rem' pb='1rem' >\r\n                                            <Box ml='1rem'>\r\n                                                <Text letterSpacing='1px' fontSize='16px' fontWeight='light'>{invoice.service_name}</Text>    \r\n                                            </Box> \r\n                                            <Box>\r\n                                                <Text letterSpacing='1px' fontSize='16px' fontWeight='bold'>{`${invoice.sqft_measurement} sqft.`}</Text>\r\n                                            </Box>\r\n                                            <Box>\r\n                                                <Text letterSpacing='1px' fontSize='16px' fontWeight='bold'>{invoice.quote_price}</Text>\r\n                                            </Box>\r\n                                            <Box mr='1rem'>\r\n                                                <Text letterSpacing='1px'  fontSize='16px' fontWeight='bold'>{invoice.quote_price}</Text>\r\n                                            </Box>\r\n                                    </Box>\r\n                                </Box>\r\n                                <Box display='flex'  bg='blue.600' p='2rem' roundedBottom='xl'>\r\n                                        <Box ml='auto'>\r\n                                            <Text fontWeight='bold' letterSpacing='1px' fontSize='22px'>Estimated Price:</Text>\r\n                                        </Box>\r\n                                        <Box ml='4rem' >\r\n                                            <Text fontWeight='bold' letterSpacing='1px' fontSize='22px'>{invoice.quote_price}</Text>\r\n                                        </Box>\r\n                                    </Box>\r\n                                        \r\n                            </Box>\r\n                            <Grid>\r\n\r\n                            </Grid>\r\n                        </Box>\r\n                    </Box>\r\n            </Flex>\r\n    )\r\n    \r\n}\r\n\r\nexport default EstimateEdit","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport swal from 'sweetalert';\r\nimport {\r\n  Flex,\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Checkbox,\r\n  Stack,\r\n  Link,\r\n  Button,\r\n  Heading,\r\n  Text,\r\n  Image,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\n\r\n\r\n\r\nfunction Login() {\r\n  let history = useHistory();\r\n  // Username and password fields\r\n  const [loginUsername, setLoginUsername] = useState('');\r\n  const [loginPassword, setLoginPassword] = useState('');\r\n\r\n  // function to authenticate the user based on the login credentials provided\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault();\r\n    const url = 'http://localhost:8081/api/auth/login'\r\n    const credentials = {\r\n      username: loginUsername,\r\n      password: loginPassword\r\n    }\r\n    await axios.post(url, credentials) // <- api endpoint for authentication\r\n    .then((response) => {\r\n      // if response is 'success', put username into the Session/Local Storage AND/OR useContext and then reroute to home dashboard\r\n      // else, throw alert window and break out of function\r\n\r\n      // on the following line, 'success' is an actual boolean variable in the backend handler, it will return true if validation was successful or false if validation was unsuccessful\r\n      if (response.status === 200) {\r\n        localStorage.setItem('username', response.data.username);\r\n        swal(\"Logged In!\", \"You are now logged in!\", \"success\");\r\n        //redirect page to home dashboard\r\n        history.push('/');\r\n        return;\r\n      } else if(response.status === 400) {\r\n        return swal(\"Try Again!\", \"Invalid Credentials!\", \"error\");\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.log(error.response);\r\n      swal(\"Try Again!\", \"Invalid Credentials!\", \"error\");\r\n    });\r\n\r\n    setLoginPassword('');\r\n    setLoginUsername('');\r\n  }\r\n\r\n  return (\r\n    <Flex\r\n    minH={'100vh'}\r\n    align={'center'}\r\n    justify={'center'}\r\n    >\r\n    <Stack spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\r\n      <Stack align={'center'}>\r\n          <Image w='100px' rounded='full' bg='blue.500' src='https://github.com/rrios4/roofing-webapp/blob/main/client/src/assets/LogoRR.png?raw=true'/>\r\n        <Heading pt='2px' fontSize={'4xl'}>Sign in to your account</Heading>\r\n        <Text fontSize={'lg'} color={'gray.600'}>\r\n          to enjoy all of our cool <Link color={'blue.400'}>features</Link> ✌️\r\n        </Text>\r\n      </Stack>\r\n      <Box\r\n        rounded={'lg'}\r\n        bg={useColorModeValue('white', 'gray.700')}\r\n        boxShadow={'lg'}\r\n        p={8}>\r\n        <Stack spacing={4}>\r\n          <form method='POST' onSubmit={handleLogin}>\r\n            <FormControl id=\"email\">\r\n              <FormLabel>Username</FormLabel>\r\n              <Input value={loginUsername} onChange={e => setLoginUsername(e.target.value)} />\r\n            </FormControl>\r\n            <FormControl id=\"password\">\r\n              <FormLabel>Password</FormLabel>\r\n              <Input value={loginPassword} type=\"password\" onChange={e => setLoginPassword(e.target.value)} />\r\n            </FormControl>\r\n          \r\n          <Stack spacing={10}>\r\n            <Stack\r\n              direction={{ base: 'column', sm: 'row' }}\r\n              align={'end'}\r\n              justify={'space-between'}>\r\n            </Stack>\r\n            <Button\r\n              type='submit'\r\n              bg={'blue.400'}\r\n              color={'white'}\r\n              _hover={{\r\n                bg: 'blue.500',\r\n              }}\r\n              onClick={handleLogin}>\r\n              Sign in\r\n            </Button>\r\n          </Stack>\r\n          </form>\r\n        </Stack>\r\n      </Box>\r\n    </Stack>\r\n  </Flex>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import React, {useState, useEffect} from 'react';\r\n//import {Employees, Navbar, Customers, Estimates, Invoices, Materials, Schedules} from './components';\r\nimport {BrowserRouter as HashRouter, Switch, Route, useHistory, Redirect} from 'react-router-dom';\r\nimport {ChakraProvider, extendTheme, Box, Flex, ThemeProvider, theme, ColorModeProvider, CSSReset} from \"@chakra-ui/react\"\r\nimport { Customers, Navbar, Invoices, Estimates, Schedules, Employees, Materials  } from \"./components/\";\r\nimport CustomerEdit from './components/Customers/Customer/CustomerEdit'\r\nimport DashBoard from './components/Dashboard/Dashboard'\r\nimport Customer from './components/Customers/Customer/Customer';\r\nimport InvoiceEdit from './components/Invoices/Invoice/InvoiceEdit'\r\nimport { InvoiceContext } from './components/Invoices/Invoice/InvoiceContext';\r\nimport EmployeeEdit from './components/Employees/Employee/EmployeeEdit';\r\nimport EstimateEdit from './components/Estimates/Estimate/EstimateEdit';\r\nimport Login from './components/Authentication/Login'\r\n\r\nconst App = () => {\r\n\r\n    // let history = useHistory();\r\n    // const session = () => {\r\n    //     if(localStorage.getItem.token !== null){\r\n    //         return(\r\n    //             <Box>\r\n    //                 <Route exact path='/login' component={Login}></Route>\r\n    //                 <Redirect to='/login'/>\r\n    //             </Box>\r\n    //         )\r\n    //     } else if(localStorage.getItem.token === null){\r\n    //         return(\r\n    //             <Box>\r\n    //                 <Route exact path='/' component={DashBoard}></Route>\r\n    //                 <Route exact path='/customers' component={Customers}></Route>\r\n    //                 <Route exaxt path='/estimates' component={Estimates}></Route>\r\n    //                 <Route exact path='/schedules' component={Schedules}></Route>\r\n    //                 <Route exact path='/employees' component={Employees}></Route>\r\n    //                 <Route exact path='/materials' component={Materials}></Route>\r\n    //                 <Route exact path='/editcustomer/:id' component={CustomerEdit}></Route>\r\n    //                 <Route exact path='/editinvoice/:id' component={InvoiceEdit}></Route>\r\n    //                 <Route exact path='/editestimate/:id' component={EstimateEdit}></Route>\r\n    //                 <Route exact path='/invoices' component={Invoices}></Route>\r\n    //                 <Route exact path='/editemployee/:id' component={EmployeeEdit}></Route>\r\n    //             </Box>\r\n    //         )\r\n    //     }   \r\n    // }\r\n    \r\n    return (\r\n        <HashRouter>\r\n            <ThemeProvider theme={theme}>\r\n                <ColorModeProvider options={{\r\n                    useSystemColorMode: false\r\n                }}>\r\n                    <CSSReset />\r\n                    <ChakraProvider>\r\n                        <Navbar/>\r\n                        <Switch>\r\n                        <Flex ml='9rem' justifyContent='center' >\r\n                            {/* {session()} */}\r\n                            <Route exact path='/login' component={Login}></Route>\r\n                            <Route exact path='/' component={DashBoard}></Route>\r\n                            <Route exact path='/customers' component={Customers}></Route>\r\n                            <Route exaxt path='/estimates' component={Estimates}></Route>\r\n                            <Route exact path='/schedules' component={Schedules}></Route>\r\n                            <Route exact path='/employees' component={Employees}></Route>\r\n                            <Route exact path='/materials' component={Materials}></Route>\r\n                            <Route exact path='/editcustomer/:id' component={CustomerEdit}></Route>\r\n                            <Route exact path='/editinvoice/:id' component={InvoiceEdit}></Route>\r\n                            <Route exact path='/editestimate/:id' component={EstimateEdit}></Route>\r\n                            <Route exact path='/invoices' component={Invoices}></Route>\r\n                            <Route exact path='/editemployee/:id' component={EmployeeEdit}></Route>\r\n                        </Flex>\r\n                        </Switch>\r\n\r\n                    </ChakraProvider>\r\n                </ColorModeProvider>\r\n            </ThemeProvider>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}